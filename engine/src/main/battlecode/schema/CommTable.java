// automatically generated by the FlatBuffers compiler, do not modify

package battlecode.schema;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class CommTable extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static CommTable getRootAsCommTable(ByteBuffer _bb) { return getRootAsCommTable(_bb, new CommTable()); }
  public static CommTable getRootAsCommTable(ByteBuffer _bb, CommTable obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public CommTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int team1(int j) { int o = __offset(4); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int team1Length() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public IntVector team1Vector() { return team1Vector(new IntVector()); }
  public IntVector team1Vector(IntVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer team1AsByteBuffer() { return __vector_as_bytebuffer(4, 4); }
  public ByteBuffer team1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 4); }
  public int team2(int j) { int o = __offset(6); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int team2Length() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public IntVector team2Vector() { return team2Vector(new IntVector()); }
  public IntVector team2Vector(IntVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer team2AsByteBuffer() { return __vector_as_bytebuffer(6, 4); }
  public ByteBuffer team2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 4); }

  public static int createCommTable(FlatBufferBuilder builder,
      int team1Offset,
      int team2Offset) {
    builder.startTable(2);
    CommTable.addTeam2(builder, team2Offset);
    CommTable.addTeam1(builder, team1Offset);
    return CommTable.endCommTable(builder);
  }

  public static void startCommTable(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addTeam1(FlatBufferBuilder builder, int team1Offset) { builder.addOffset(0, team1Offset, 0); }
  public static int createTeam1Vector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startTeam1Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTeam2(FlatBufferBuilder builder, int team2Offset) { builder.addOffset(1, team2Offset, 0); }
  public static int createTeam2Vector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startTeam2Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endCommTable(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public CommTable get(int j) { return get(new CommTable(), j); }
    public CommTable get(CommTable obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

