// automatically generated by the FlatBuffers compiler, do not modify

package battlecode.schema;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Constants extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static Constants getRootAsConstants(ByteBuffer _bb) { return getRootAsConstants(_bb, new Constants()); }
  public static Constants getRootAsConstants(ByteBuffer _bb, Constants obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Constants __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int setupPhaseLength() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int flagMinDistance() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int globalUpgradeRoundDelay() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int passiveResourceRate() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int robotBaseHealth() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int jailedRounds() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int visionRadius() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int actionRadius() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createConstants(FlatBufferBuilder builder,
      int setupPhaseLength,
      int flagMinDistance,
      int globalUpgradeRoundDelay,
      int passiveResourceRate,
      int robotBaseHealth,
      int jailedRounds,
      int visionRadius,
      int actionRadius) {
    builder.startTable(8);
    Constants.addActionRadius(builder, actionRadius);
    Constants.addVisionRadius(builder, visionRadius);
    Constants.addJailedRounds(builder, jailedRounds);
    Constants.addRobotBaseHealth(builder, robotBaseHealth);
    Constants.addPassiveResourceRate(builder, passiveResourceRate);
    Constants.addGlobalUpgradeRoundDelay(builder, globalUpgradeRoundDelay);
    Constants.addFlagMinDistance(builder, flagMinDistance);
    Constants.addSetupPhaseLength(builder, setupPhaseLength);
    return Constants.endConstants(builder);
  }

  public static void startConstants(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addSetupPhaseLength(FlatBufferBuilder builder, int setupPhaseLength) { builder.addInt(0, setupPhaseLength, 0); }
  public static void addFlagMinDistance(FlatBufferBuilder builder, int flagMinDistance) { builder.addInt(1, flagMinDistance, 0); }
  public static void addGlobalUpgradeRoundDelay(FlatBufferBuilder builder, int globalUpgradeRoundDelay) { builder.addInt(2, globalUpgradeRoundDelay, 0); }
  public static void addPassiveResourceRate(FlatBufferBuilder builder, int passiveResourceRate) { builder.addInt(3, passiveResourceRate, 0); }
  public static void addRobotBaseHealth(FlatBufferBuilder builder, int robotBaseHealth) { builder.addInt(4, robotBaseHealth, 0); }
  public static void addJailedRounds(FlatBufferBuilder builder, int jailedRounds) { builder.addInt(5, jailedRounds, 0); }
  public static void addVisionRadius(FlatBufferBuilder builder, int visionRadius) { builder.addInt(6, visionRadius, 0); }
  public static void addActionRadius(FlatBufferBuilder builder, int actionRadius) { builder.addInt(7, actionRadius, 0); }
  public static int endConstants(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Constants get(int j) { return get(new Constants(), j); }
    public Constants get(Constants obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

