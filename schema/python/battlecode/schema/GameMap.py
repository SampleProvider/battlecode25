# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GameMap(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GameMap()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGameMap(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GameMap
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GameMap
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GameMap
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from battlecode.schema.Vec import Vec
            obj = Vec()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GameMap
    def Symmetry(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GameMap
    def InitialBodies(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from battlecode.schema.InitialBodyTable import InitialBodyTable
            obj = InitialBodyTable()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GameMap
    def RandomSeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GameMap
    def Walls(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # GameMap
    def WallsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # GameMap
    def WallsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GameMap
    def WallsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # GameMap
    def Water(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # GameMap
    def WaterAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # GameMap
    def WaterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GameMap
    def WaterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # GameMap
    def Divider(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # GameMap
    def DividerAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # GameMap
    def DividerLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GameMap
    def DividerIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # GameMap
    def SpawnLocations(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from battlecode.schema.VecTable import VecTable
            obj = VecTable()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GameMap
    def ResourcePiles(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from battlecode.schema.VecTable import VecTable
            obj = VecTable()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GameMap
    def ResourcePileAmounts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # GameMap
    def ResourcePileAmountsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # GameMap
    def ResourcePileAmountsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GameMap
    def ResourcePileAmountsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

def GameMapStart(builder):
    builder.StartObject(11)

def Start(builder):
    GameMapStart(builder)

def GameMapAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    GameMapAddName(builder, name)

def GameMapAddSize(builder, size):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(size), 0)

def AddSize(builder, size):
    GameMapAddSize(builder, size)

def GameMapAddSymmetry(builder, symmetry):
    builder.PrependInt32Slot(2, symmetry, 0)

def AddSymmetry(builder, symmetry):
    GameMapAddSymmetry(builder, symmetry)

def GameMapAddInitialBodies(builder, initialBodies):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(initialBodies), 0)

def AddInitialBodies(builder, initialBodies):
    GameMapAddInitialBodies(builder, initialBodies)

def GameMapAddRandomSeed(builder, randomSeed):
    builder.PrependInt32Slot(4, randomSeed, 0)

def AddRandomSeed(builder, randomSeed):
    GameMapAddRandomSeed(builder, randomSeed)

def GameMapAddWalls(builder, walls):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(walls), 0)

def AddWalls(builder, walls):
    GameMapAddWalls(builder, walls)

def GameMapStartWallsVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartWallsVector(builder, numElems):
    return GameMapStartWallsVector(builder, numElems)

def GameMapAddWater(builder, water):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(water), 0)

def AddWater(builder, water):
    GameMapAddWater(builder, water)

def GameMapStartWaterVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartWaterVector(builder, numElems):
    return GameMapStartWaterVector(builder, numElems)

def GameMapAddDivider(builder, divider):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(divider), 0)

def AddDivider(builder, divider):
    GameMapAddDivider(builder, divider)

def GameMapStartDividerVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartDividerVector(builder, numElems):
    return GameMapStartDividerVector(builder, numElems)

def GameMapAddSpawnLocations(builder, spawnLocations):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(spawnLocations), 0)

def AddSpawnLocations(builder, spawnLocations):
    GameMapAddSpawnLocations(builder, spawnLocations)

def GameMapAddResourcePiles(builder, resourcePiles):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(resourcePiles), 0)

def AddResourcePiles(builder, resourcePiles):
    GameMapAddResourcePiles(builder, resourcePiles)

def GameMapAddResourcePileAmounts(builder, resourcePileAmounts):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(resourcePileAmounts), 0)

def AddResourcePileAmounts(builder, resourcePileAmounts):
    GameMapAddResourcePileAmounts(builder, resourcePileAmounts)

def GameMapStartResourcePileAmountsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartResourcePileAmountsVector(builder, numElems):
    return GameMapStartResourcePileAmountsVector(builder, numElems)

def GameMapEnd(builder):
    return builder.EndObject()

def End(builder):
    return GameMapEnd(builder)
