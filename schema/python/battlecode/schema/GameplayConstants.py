# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GameplayConstants(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GameplayConstants()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGameplayConstants(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GameplayConstants
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GameplayConstants
    def BaseHealth(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # GameplayConstants
    def BaseHealthAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # GameplayConstants
    def BaseHealthLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GameplayConstants
    def BaseHealthIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # GameplayConstants
    def VisionRadius(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # GameplayConstants
    def VisionRadiusAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # GameplayConstants
    def VisionRadiusLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GameplayConstants
    def VisionRadiusIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # GameplayConstants
    def ActionRadius(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # GameplayConstants
    def ActionRadiusAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # GameplayConstants
    def ActionRadiusLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GameplayConstants
    def ActionRadiusIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def GameplayConstantsStart(builder):
    builder.StartObject(3)

def Start(builder):
    GameplayConstantsStart(builder)

def GameplayConstantsAddBaseHealth(builder, baseHealth):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(baseHealth), 0)

def AddBaseHealth(builder, baseHealth):
    GameplayConstantsAddBaseHealth(builder, baseHealth)

def GameplayConstantsStartBaseHealthVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBaseHealthVector(builder, numElems):
    return GameplayConstantsStartBaseHealthVector(builder, numElems)

def GameplayConstantsAddVisionRadius(builder, visionRadius):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(visionRadius), 0)

def AddVisionRadius(builder, visionRadius):
    GameplayConstantsAddVisionRadius(builder, visionRadius)

def GameplayConstantsStartVisionRadiusVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartVisionRadiusVector(builder, numElems):
    return GameplayConstantsStartVisionRadiusVector(builder, numElems)

def GameplayConstantsAddActionRadius(builder, actionRadius):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(actionRadius), 0)

def AddActionRadius(builder, actionRadius):
    GameplayConstantsAddActionRadius(builder, actionRadius)

def GameplayConstantsStartActionRadiusVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartActionRadiusVector(builder, numElems):
    return GameplayConstantsStartActionRadiusVector(builder, numElems)

def GameplayConstantsEnd(builder):
    return builder.EndObject()

def End(builder):
    return GameplayConstantsEnd(builder)
