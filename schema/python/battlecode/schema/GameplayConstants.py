# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GameplayConstants(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GameplayConstants()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGameplayConstants(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GameplayConstants
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GameplayConstants
    def SetupPhaseLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GameplayConstants
    def FlagMinDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GameplayConstants
    def GlobalUpgradeRoundDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GameplayConstants
    def PassiveResourceRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GameplayConstants
    def RobotBaseHealth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GameplayConstants
    def JailedRounds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GameplayConstants
    def VisionRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GameplayConstants
    def ActionRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def GameplayConstantsStart(builder):
    builder.StartObject(8)

def Start(builder):
    GameplayConstantsStart(builder)

def GameplayConstantsAddSetupPhaseLength(builder, setupPhaseLength):
    builder.PrependInt32Slot(0, setupPhaseLength, 0)

def AddSetupPhaseLength(builder, setupPhaseLength):
    GameplayConstantsAddSetupPhaseLength(builder, setupPhaseLength)

def GameplayConstantsAddFlagMinDistance(builder, flagMinDistance):
    builder.PrependInt32Slot(1, flagMinDistance, 0)

def AddFlagMinDistance(builder, flagMinDistance):
    GameplayConstantsAddFlagMinDistance(builder, flagMinDistance)

def GameplayConstantsAddGlobalUpgradeRoundDelay(builder, globalUpgradeRoundDelay):
    builder.PrependInt32Slot(2, globalUpgradeRoundDelay, 0)

def AddGlobalUpgradeRoundDelay(builder, globalUpgradeRoundDelay):
    GameplayConstantsAddGlobalUpgradeRoundDelay(builder, globalUpgradeRoundDelay)

def GameplayConstantsAddPassiveResourceRate(builder, passiveResourceRate):
    builder.PrependInt32Slot(3, passiveResourceRate, 0)

def AddPassiveResourceRate(builder, passiveResourceRate):
    GameplayConstantsAddPassiveResourceRate(builder, passiveResourceRate)

def GameplayConstantsAddRobotBaseHealth(builder, robotBaseHealth):
    builder.PrependInt32Slot(4, robotBaseHealth, 0)

def AddRobotBaseHealth(builder, robotBaseHealth):
    GameplayConstantsAddRobotBaseHealth(builder, robotBaseHealth)

def GameplayConstantsAddJailedRounds(builder, jailedRounds):
    builder.PrependInt32Slot(5, jailedRounds, 0)

def AddJailedRounds(builder, jailedRounds):
    GameplayConstantsAddJailedRounds(builder, jailedRounds)

def GameplayConstantsAddVisionRadius(builder, visionRadius):
    builder.PrependInt32Slot(6, visionRadius, 0)

def AddVisionRadius(builder, visionRadius):
    GameplayConstantsAddVisionRadius(builder, visionRadius)

def GameplayConstantsAddActionRadius(builder, actionRadius):
    builder.PrependInt32Slot(7, actionRadius, 0)

def AddActionRadius(builder, actionRadius):
    GameplayConstantsAddActionRadius(builder, actionRadius)

def GameplayConstantsEnd(builder):
    return builder.EndObject()

def End(builder):
    return GameplayConstantsEnd(builder)
