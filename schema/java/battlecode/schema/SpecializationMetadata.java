// automatically generated by the FlatBuffers compiler, do not modify

package battlecode.schema;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class SpecializationMetadata extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static SpecializationMetadata getRootAsSpecializationMetadata(ByteBuffer _bb) { return getRootAsSpecializationMetadata(_bb, new SpecializationMetadata()); }
  public static SpecializationMetadata getRootAsSpecializationMetadata(ByteBuffer _bb, SpecializationMetadata obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SpecializationMetadata __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte type() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public int level() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int actionCost() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int actionJailedPenalty() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int cooldownReduction() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int damageIncrease() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int healIncrease() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createSpecializationMetadata(FlatBufferBuilder builder,
      byte type,
      int level,
      int actionCost,
      int actionJailedPenalty,
      int cooldownReduction,
      int damageIncrease,
      int healIncrease) {
    builder.startTable(7);
    SpecializationMetadata.addHealIncrease(builder, healIncrease);
    SpecializationMetadata.addDamageIncrease(builder, damageIncrease);
    SpecializationMetadata.addCooldownReduction(builder, cooldownReduction);
    SpecializationMetadata.addActionJailedPenalty(builder, actionJailedPenalty);
    SpecializationMetadata.addActionCost(builder, actionCost);
    SpecializationMetadata.addLevel(builder, level);
    SpecializationMetadata.addType(builder, type);
    return SpecializationMetadata.endSpecializationMetadata(builder);
  }

  public static void startSpecializationMetadata(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(0, type, 0); }
  public static void addLevel(FlatBufferBuilder builder, int level) { builder.addInt(1, level, 0); }
  public static void addActionCost(FlatBufferBuilder builder, int actionCost) { builder.addInt(2, actionCost, 0); }
  public static void addActionJailedPenalty(FlatBufferBuilder builder, int actionJailedPenalty) { builder.addInt(3, actionJailedPenalty, 0); }
  public static void addCooldownReduction(FlatBufferBuilder builder, int cooldownReduction) { builder.addInt(4, cooldownReduction, 0); }
  public static void addDamageIncrease(FlatBufferBuilder builder, int damageIncrease) { builder.addInt(5, damageIncrease, 0); }
  public static void addHealIncrease(FlatBufferBuilder builder, int healIncrease) { builder.addInt(6, healIncrease, 0); }
  public static int endSpecializationMetadata(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SpecializationMetadata get(int j) { return get(new SpecializationMetadata(), j); }
    public SpecializationMetadata get(SpecializationMetadata obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

