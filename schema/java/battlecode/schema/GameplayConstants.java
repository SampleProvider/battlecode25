// automatically generated by the FlatBuffers compiler, do not modify

package battlecode.schema;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class GameplayConstants extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static GameplayConstants getRootAsGameplayConstants(ByteBuffer _bb) { return getRootAsGameplayConstants(_bb, new GameplayConstants()); }
  public static GameplayConstants getRootAsGameplayConstants(ByteBuffer _bb, GameplayConstants obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public GameplayConstants __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int baseHealth(int j) { int o = __offset(4); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int baseHealthLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public IntVector baseHealthVector() { return baseHealthVector(new IntVector()); }
  public IntVector baseHealthVector(IntVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer baseHealthAsByteBuffer() { return __vector_as_bytebuffer(4, 4); }
  public ByteBuffer baseHealthInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 4); }
  public int visionRadius(int j) { int o = __offset(6); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int visionRadiusLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public IntVector visionRadiusVector() { return visionRadiusVector(new IntVector()); }
  public IntVector visionRadiusVector(IntVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer visionRadiusAsByteBuffer() { return __vector_as_bytebuffer(6, 4); }
  public ByteBuffer visionRadiusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 4); }
  public int actionRadius(int j) { int o = __offset(8); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int actionRadiusLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public IntVector actionRadiusVector() { return actionRadiusVector(new IntVector()); }
  public IntVector actionRadiusVector(IntVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer actionRadiusAsByteBuffer() { return __vector_as_bytebuffer(8, 4); }
  public ByteBuffer actionRadiusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 4); }

  public static int createGameplayConstants(FlatBufferBuilder builder,
      int baseHealthOffset,
      int visionRadiusOffset,
      int actionRadiusOffset) {
    builder.startTable(3);
    GameplayConstants.addActionRadius(builder, actionRadiusOffset);
    GameplayConstants.addVisionRadius(builder, visionRadiusOffset);
    GameplayConstants.addBaseHealth(builder, baseHealthOffset);
    return GameplayConstants.endGameplayConstants(builder);
  }

  public static void startGameplayConstants(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addBaseHealth(FlatBufferBuilder builder, int baseHealthOffset) { builder.addOffset(0, baseHealthOffset, 0); }
  public static int createBaseHealthVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startBaseHealthVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addVisionRadius(FlatBufferBuilder builder, int visionRadiusOffset) { builder.addOffset(1, visionRadiusOffset, 0); }
  public static int createVisionRadiusVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startVisionRadiusVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addActionRadius(FlatBufferBuilder builder, int actionRadiusOffset) { builder.addOffset(2, actionRadiusOffset, 0); }
  public static int createActionRadiusVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startActionRadiusVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endGameplayConstants(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public GameplayConstants get(int j) { return get(new GameplayConstants(), j); }
    public GameplayConstants get(GameplayConstants obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

