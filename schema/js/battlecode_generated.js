"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.battlecode = void 0;
/**
 * The possible types of things that can exist.
 *
 * @enum {number}
 */
var battlecode;
(function (battlecode) {
    var schema;
    (function (schema) {
        var BodyType;
        (function (BodyType) {
            BodyType[BodyType["HEADQUARTERS"] = 0] = "HEADQUARTERS";
            BodyType[BodyType["CARRIER"] = 1] = "CARRIER";
            BodyType[BodyType["LAUNCHER"] = 2] = "LAUNCHER";
            BodyType[BodyType["AMPLIFIER"] = 3] = "AMPLIFIER";
            BodyType[BodyType["DESTABILIZER"] = 4] = "DESTABILIZER";
            BodyType[BodyType["BOOSTER"] = 5] = "BOOSTER";
        })(BodyType = schema.BodyType || (schema.BodyType = {}));
    })(schema = battlecode.schema || (battlecode.schema = {}));
})(battlecode = exports.battlecode || (exports.battlecode = {}));
;
/**
 * Actions that can be performed.
 * Purely aesthetic; have no actual effect on simulation.
 * (Although the simulation may want to track the 'parents' of
 * particular robots.)
 * Actions may have 'targets', which are the units on which
 * the actions were performed.
 *
 * @enum {number}
 */
(function (battlecode) {
    var schema;
    (function (schema) {
        var Action;
        (function (Action) {
            /**
             * Target: ID for direction in which attack occurs
             */
            Action[Action["LAUNCH_ATTACK"] = 0] = "LAUNCH_ATTACK";
            /**
             * Target: ID for direction in which attack occurs
             */
            Action[Action["THROW_ATTACK"] = 1] = "THROW_ATTACK";
            /**
             * Target: ID of robot spawned
             */
            Action[Action["SPAWN_UNIT"] = 2] = "SPAWN_UNIT";
            /**
             * Target: location mined, x + y * width
             */
            Action[Action["PICK_UP_RESOURCE"] = 3] = "PICK_UP_RESOURCE";
            /**
             * Target: location to place resource, x + y * width
             */
            Action[Action["PLACE_RESOURCE"] = 4] = "PLACE_RESOURCE";
            /**
             * Target: location destabilization is centralized at, x + y * width
             */
            Action[Action["DESTABILIZE"] = 5] = "DESTABILIZE";
            /**
             * Target: location destabilization damage is centralized at, x + y * width
             */
            Action[Action["DESTABILIZE_DAMAGE"] = 6] = "DESTABILIZE_DAMAGE";
            /**
             * Target: location boost is centralized at, x + y * width
             */
            Action[Action["BOOST"] = 7] = "BOOST";
            /**
             * Target: ANCHOR type, 0 or non-accelerating, 1 for accelerating
             */
            Action[Action["BUILD_ANCHOR"] = 8] = "BUILD_ANCHOR";
            /**
             * Target: (Robot id picked up from)*2 + (ANCHOR type, 0 or non-accelerating, 1 for accelerating)
             */
            Action[Action["PICK_UP_ANCHOR"] = 9] = "PICK_UP_ANCHOR";
            /**
             * Target: island id for the island the anchor is being placed on
             */
            Action[Action["PLACE_ANCHOR"] = 10] = "PLACE_ANCHOR";
            /**
             * Target: change in health (can be negative)
             */
            Action[Action["CHANGE_HEALTH"] = 11] = "CHANGE_HEALTH";
            /**
             * Target: change in adamantium (can be negative)
             */
            Action[Action["CHANGE_ADAMANTIUM"] = 12] = "CHANGE_ADAMANTIUM";
            /**
             * Target: change in mana (can be negative)
             */
            Action[Action["CHANGE_MANA"] = 13] = "CHANGE_MANA";
            /**
             * Target: change in elixir (can be negative)
             */
            Action[Action["CHANGE_ELIXIR"] = 14] = "CHANGE_ELIXIR";
            /**
             * Dies due to an uncaught exception
             * Target: none
             */
            Action[Action["DIE_EXCEPTION"] = 15] = "DIE_EXCEPTION";
        })(Action = schema.Action || (schema.Action = {}));
    })(schema = battlecode.schema || (battlecode.schema = {}));
})(battlecode = exports.battlecode || (exports.battlecode = {}));
;
/**
 * Events
 * An Event is a single step that needs to be processed.
 * A saved game simply consists of a long list of Events.
 * Events can be divided by either being sent separately (e.g. as separate
 * websocket messages), or by being wrapped with a GameWrapper.
 * A game consists of a series of matches; a match consists of a series of
 * rounds, and is played on a single map. Each round is a single simulation
 * step.
 *
 * @enum {number}
 */
(function (battlecode) {
    var schema;
    (function (schema) {
        var Event;
        (function (Event) {
            Event[Event["NONE"] = 0] = "NONE";
            /**
             * There should only be one GameHeader, at the start of the stream.
             */
            Event[Event["GameHeader"] = 1] = "GameHeader";
            /**
             * There should be one MatchHeader at the start of each match.
             */
            Event[Event["MatchHeader"] = 2] = "MatchHeader";
            /**
             * A single simulation step. A round may be skipped if
             * nothing happens during its time.
             */
            Event[Event["Round"] = 3] = "Round";
            /**
             * There should be one MatchFooter at the end of each simulation step.
             */
            Event[Event["MatchFooter"] = 4] = "MatchFooter";
            /**
             * There should only be one GameFooter, at the end of the stream.
             */
            Event[Event["GameFooter"] = 5] = "GameFooter";
        })(Event = schema.Event || (schema.Event = {}));
    })(schema = battlecode.schema || (battlecode.schema = {}));
})(battlecode = exports.battlecode || (exports.battlecode = {}));
;
/**
 * A vector in two-dimensional space. Discrete space, of course.
 * Defaults to the 0 vector.
 *
 * @constructor
 */
(function (battlecode) {
    var schema;
    (function (schema) {
        var Vec = /** @class */ (function () {
            function Vec() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns Vec
             */
            Vec.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @returns number
             */
            Vec.prototype.x = function () {
                return this.bb.readInt32(this.bb_pos);
            };
            ;
            /**
             * @returns number
             */
            Vec.prototype.y = function () {
                return this.bb.readInt32(this.bb_pos + 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number x
             * @param number y
             * @returns flatbuffers.Offset
             */
            Vec.createVec = function (builder, x, y) {
                builder.prep(4, 8);
                builder.writeInt32(y);
                builder.writeInt32(x);
                return builder.offset();
            };
            ;
            return Vec;
        }());
        schema.Vec = Vec;
    })(schema = battlecode.schema || (battlecode.schema = {}));
})(battlecode = exports.battlecode || (exports.battlecode = {}));
/**
 * A table of vectors.
 *
 * @constructor
 */
(function (battlecode) {
    var schema;
    (function (schema) {
        var VecTable = /** @class */ (function () {
            function VecTable() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns VecTable
             */
            VecTable.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param VecTable= obj
             * @returns VecTable
             */
            VecTable.getRootAsVecTable = function (bb, obj) {
                return (obj || new VecTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            };
            ;
            /**
             * @param number index
             * @returns number
             */
            VecTable.prototype.xs = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            VecTable.prototype.xsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            VecTable.prototype.xsArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * @param number index
             * @returns number
             */
            VecTable.prototype.ys = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            VecTable.prototype.ysLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            VecTable.prototype.ysArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            VecTable.startVecTable = function (builder) {
                builder.startObject(2);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset xsOffset
             */
            VecTable.addXs = function (builder, xsOffset) {
                builder.addFieldOffset(0, xsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            VecTable.createXsVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            VecTable.startXsVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset ysOffset
             */
            VecTable.addYs = function (builder, ysOffset) {
                builder.addFieldOffset(1, ysOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            VecTable.createYsVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            VecTable.startYsVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            VecTable.endVecTable = function (builder) {
                var offset = builder.endObject();
                return offset;
            };
            ;
            VecTable.createVecTable = function (builder, xsOffset, ysOffset) {
                VecTable.startVecTable(builder);
                VecTable.addXs(builder, xsOffset);
                VecTable.addYs(builder, ysOffset);
                return VecTable.endVecTable(builder);
            };
            return VecTable;
        }());
        schema.VecTable = VecTable;
    })(schema = battlecode.schema || (battlecode.schema = {}));
})(battlecode = exports.battlecode || (exports.battlecode = {}));
/**
 * A table of RGB values.
 *
 * @constructor
 */
(function (battlecode) {
    var schema;
    (function (schema) {
        var RGBTable = /** @class */ (function () {
            function RGBTable() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns RGBTable
             */
            RGBTable.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param RGBTable= obj
             * @returns RGBTable
             */
            RGBTable.getRootAsRGBTable = function (bb, obj) {
                return (obj || new RGBTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            };
            ;
            /**
             * @param number index
             * @returns number
             */
            RGBTable.prototype.red = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            RGBTable.prototype.redLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            RGBTable.prototype.redArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * @param number index
             * @returns number
             */
            RGBTable.prototype.green = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            RGBTable.prototype.greenLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            RGBTable.prototype.greenArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * @param number index
             * @returns number
             */
            RGBTable.prototype.blue = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            RGBTable.prototype.blueLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            RGBTable.prototype.blueArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            RGBTable.startRGBTable = function (builder) {
                builder.startObject(3);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset redOffset
             */
            RGBTable.addRed = function (builder, redOffset) {
                builder.addFieldOffset(0, redOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            RGBTable.createRedVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            RGBTable.startRedVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset greenOffset
             */
            RGBTable.addGreen = function (builder, greenOffset) {
                builder.addFieldOffset(1, greenOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            RGBTable.createGreenVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            RGBTable.startGreenVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset blueOffset
             */
            RGBTable.addBlue = function (builder, blueOffset) {
                builder.addFieldOffset(2, blueOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            RGBTable.createBlueVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            RGBTable.startBlueVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            RGBTable.endRGBTable = function (builder) {
                var offset = builder.endObject();
                return offset;
            };
            ;
            RGBTable.createRGBTable = function (builder, redOffset, greenOffset, blueOffset) {
                RGBTable.startRGBTable(builder);
                RGBTable.addRed(builder, redOffset);
                RGBTable.addGreen(builder, greenOffset);
                RGBTable.addBlue(builder, blueOffset);
                return RGBTable.endRGBTable(builder);
            };
            return RGBTable;
        }());
        schema.RGBTable = RGBTable;
    })(schema = battlecode.schema || (battlecode.schema = {}));
})(battlecode = exports.battlecode || (exports.battlecode = {}));
/**
 * A list of new bodies to be placed on the map.
 *
 * @constructor
 */
(function (battlecode) {
    var schema;
    (function (schema) {
        var SpawnedBodyTable = /** @class */ (function () {
            function SpawnedBodyTable() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns SpawnedBodyTable
             */
            SpawnedBodyTable.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param SpawnedBodyTable= obj
             * @returns SpawnedBodyTable
             */
            SpawnedBodyTable.getRootAsSpawnedBodyTable = function (bb, obj) {
                return (obj || new SpawnedBodyTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            };
            ;
            /**
             * The numeric ID of the new bodies.
             * Will never be negative.
             * There will only be one body with a particular ID at a time.
             * So, there will never be two robots with the same ID, or a robot and
             * a building with the same ID.
             *
             * @param number index
             * @returns number
             */
            SpawnedBodyTable.prototype.robotIDs = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            SpawnedBodyTable.prototype.robotIDsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            SpawnedBodyTable.prototype.robotIDsArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The teams of the new bodies.
             *
             * @param number index
             * @returns number
             */
            SpawnedBodyTable.prototype.teamIDs = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
            };
            ;
            /**
             * @returns number
             */
            SpawnedBodyTable.prototype.teamIDsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int8Array
             */
            SpawnedBodyTable.prototype.teamIDsArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The types of the new bodies.
             *
             * @param number index
             * @returns battlecode.schema.BodyType
             */
            SpawnedBodyTable.prototype.types = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? /**  */ (this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index)) : /**  */ (0);
            };
            ;
            /**
             * @returns number
             */
            SpawnedBodyTable.prototype.typesLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int8Array
             */
            SpawnedBodyTable.prototype.typesArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The locations of the bodies.
             *
             * @param battlecode.schema.VecTable= obj
             * @returns battlecode.schema.VecTable|null
             */
            SpawnedBodyTable.prototype.locs = function (obj) {
                var offset = this.bb.__offset(this.bb_pos, 10);
                return offset ? (obj || new battlecode.schema.VecTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            SpawnedBodyTable.startSpawnedBodyTable = function (builder) {
                builder.startObject(4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset robotIDsOffset
             */
            SpawnedBodyTable.addRobotIDs = function (builder, robotIDsOffset) {
                builder.addFieldOffset(0, robotIDsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            SpawnedBodyTable.createRobotIDsVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            SpawnedBodyTable.startRobotIDsVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset teamIDsOffset
             */
            SpawnedBodyTable.addTeamIDs = function (builder, teamIDsOffset) {
                builder.addFieldOffset(1, teamIDsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            SpawnedBodyTable.createTeamIDsVector = function (builder, data) {
                builder.startVector(1, data.length, 1);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt8(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            SpawnedBodyTable.startTeamIDsVector = function (builder, numElems) {
                builder.startVector(1, numElems, 1);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset typesOffset
             */
            SpawnedBodyTable.addTypes = function (builder, typesOffset) {
                builder.addFieldOffset(2, typesOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<battlecode.schema.BodyType> data
             * @returns flatbuffers.Offset
             */
            SpawnedBodyTable.createTypesVector = function (builder, data) {
                builder.startVector(1, data.length, 1);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt8(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            SpawnedBodyTable.startTypesVector = function (builder, numElems) {
                builder.startVector(1, numElems, 1);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset locsOffset
             */
            SpawnedBodyTable.addLocs = function (builder, locsOffset) {
                builder.addFieldOffset(3, locsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            SpawnedBodyTable.endSpawnedBodyTable = function (builder) {
                var offset = builder.endObject();
                return offset;
            };
            ;
            SpawnedBodyTable.createSpawnedBodyTable = function (builder, robotIDsOffset, teamIDsOffset, typesOffset, locsOffset) {
                SpawnedBodyTable.startSpawnedBodyTable(builder);
                SpawnedBodyTable.addRobotIDs(builder, robotIDsOffset);
                SpawnedBodyTable.addTeamIDs(builder, teamIDsOffset);
                SpawnedBodyTable.addTypes(builder, typesOffset);
                SpawnedBodyTable.addLocs(builder, locsOffset);
                return SpawnedBodyTable.endSpawnedBodyTable(builder);
            };
            return SpawnedBodyTable;
        }());
        schema.SpawnedBodyTable = SpawnedBodyTable;
    })(schema = battlecode.schema || (battlecode.schema = {}));
})(battlecode = exports.battlecode || (exports.battlecode = {}));
/**
 * The map a round is played on.
 *
 * @constructor
 */
(function (battlecode) {
    var schema;
    (function (schema) {
        var GameMap = /** @class */ (function () {
            function GameMap() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns GameMap
             */
            GameMap.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param GameMap= obj
             * @returns GameMap
             */
            GameMap.getRootAsGameMap = function (bb, obj) {
                return (obj || new GameMap).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            };
            ;
            GameMap.prototype.name = function (optionalEncoding) {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
            };
            ;
            /**
             * The bottom corner of the map.
             *
             * @param battlecode.schema.Vec= obj
             * @returns battlecode.schema.Vec|null
             */
            GameMap.prototype.minCorner = function (obj) {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? (obj || new battlecode.schema.Vec).__init(this.bb_pos + offset, this.bb) : null;
            };
            ;
            /**
             * The top corner of the map.
             *
             * @param battlecode.schema.Vec= obj
             * @returns battlecode.schema.Vec|null
             */
            GameMap.prototype.maxCorner = function (obj) {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? (obj || new battlecode.schema.Vec).__init(this.bb_pos + offset, this.bb) : null;
            };
            ;
            /**
             * The map symmetry: 0 for rotation, 1 for horizontal, 2 for vertical.
             *
             * @returns number
             */
            GameMap.prototype.symmetry = function () {
                var offset = this.bb.__offset(this.bb_pos, 10);
                return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * The bodies on the map.
             *
             * @param battlecode.schema.SpawnedBodyTable= obj
             * @returns battlecode.schema.SpawnedBodyTable|null
             */
            GameMap.prototype.bodies = function (obj) {
                var offset = this.bb.__offset(this.bb_pos, 12);
                return offset ? (obj || new battlecode.schema.SpawnedBodyTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
            };
            ;
            /**
             * The random seed of the map.
             *
             * @returns number
             */
            GameMap.prototype.randomSeed = function () {
                var offset = this.bb.__offset(this.bb_pos, 14);
                return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * The walls on the map.
             *
             * @param number index
             * @returns boolean
             */
            GameMap.prototype.walls = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 16);
                return offset ? !!this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index) : false;
            };
            ;
            /**
             * @returns number
             */
            GameMap.prototype.wallsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 16);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int8Array
             */
            GameMap.prototype.wallsArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 16);
                return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The clouds on the map.
             *
             * @param number index
             * @returns boolean
             */
            GameMap.prototype.clouds = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 18);
                return offset ? !!this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index) : false;
            };
            ;
            /**
             * @returns number
             */
            GameMap.prototype.cloudsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 18);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int8Array
             */
            GameMap.prototype.cloudsArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 18);
                return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The currents on the map.
             *
             * @param number index
             * @returns number
             */
            GameMap.prototype.currents = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 20);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            GameMap.prototype.currentsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 20);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            GameMap.prototype.currentsArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 20);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The island each square on the map belongs to.
             *
             * @param number index
             * @returns number
             */
            GameMap.prototype.islands = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 22);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            GameMap.prototype.islandsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 22);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            GameMap.prototype.islandsArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 22);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The resource type each square is.
             *
             * @param number index
             * @returns number
             */
            GameMap.prototype.resources = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 24);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            GameMap.prototype.resourcesLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 24);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            GameMap.prototype.resourcesArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 24);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            GameMap.startGameMap = function (builder) {
                builder.startObject(11);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset nameOffset
             */
            GameMap.addName = function (builder, nameOffset) {
                builder.addFieldOffset(0, nameOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset minCornerOffset
             */
            GameMap.addMinCorner = function (builder, minCornerOffset) {
                builder.addFieldStruct(1, minCornerOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset maxCornerOffset
             */
            GameMap.addMaxCorner = function (builder, maxCornerOffset) {
                builder.addFieldStruct(2, maxCornerOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number symmetry
             */
            GameMap.addSymmetry = function (builder, symmetry) {
                builder.addFieldInt32(3, symmetry, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset bodiesOffset
             */
            GameMap.addBodies = function (builder, bodiesOffset) {
                builder.addFieldOffset(4, bodiesOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number randomSeed
             */
            GameMap.addRandomSeed = function (builder, randomSeed) {
                builder.addFieldInt32(5, randomSeed, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset wallsOffset
             */
            GameMap.addWalls = function (builder, wallsOffset) {
                builder.addFieldOffset(6, wallsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<boolean> data
             * @returns flatbuffers.Offset
             */
            GameMap.createWallsVector = function (builder, data) {
                builder.startVector(1, data.length, 1);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt8(+data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            GameMap.startWallsVector = function (builder, numElems) {
                builder.startVector(1, numElems, 1);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset cloudsOffset
             */
            GameMap.addClouds = function (builder, cloudsOffset) {
                builder.addFieldOffset(7, cloudsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<boolean> data
             * @returns flatbuffers.Offset
             */
            GameMap.createCloudsVector = function (builder, data) {
                builder.startVector(1, data.length, 1);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt8(+data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            GameMap.startCloudsVector = function (builder, numElems) {
                builder.startVector(1, numElems, 1);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset currentsOffset
             */
            GameMap.addCurrents = function (builder, currentsOffset) {
                builder.addFieldOffset(8, currentsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            GameMap.createCurrentsVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            GameMap.startCurrentsVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset islandsOffset
             */
            GameMap.addIslands = function (builder, islandsOffset) {
                builder.addFieldOffset(9, islandsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            GameMap.createIslandsVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            GameMap.startIslandsVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset resourcesOffset
             */
            GameMap.addResources = function (builder, resourcesOffset) {
                builder.addFieldOffset(10, resourcesOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            GameMap.createResourcesVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            GameMap.startResourcesVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            GameMap.endGameMap = function (builder) {
                var offset = builder.endObject();
                return offset;
            };
            ;
            GameMap.createGameMap = function (builder, nameOffset, minCornerOffset, maxCornerOffset, symmetry, bodiesOffset, randomSeed, wallsOffset, cloudsOffset, currentsOffset, islandsOffset, resourcesOffset) {
                GameMap.startGameMap(builder);
                GameMap.addName(builder, nameOffset);
                GameMap.addMinCorner(builder, minCornerOffset);
                GameMap.addMaxCorner(builder, maxCornerOffset);
                GameMap.addSymmetry(builder, symmetry);
                GameMap.addBodies(builder, bodiesOffset);
                GameMap.addRandomSeed(builder, randomSeed);
                GameMap.addWalls(builder, wallsOffset);
                GameMap.addClouds(builder, cloudsOffset);
                GameMap.addCurrents(builder, currentsOffset);
                GameMap.addIslands(builder, islandsOffset);
                GameMap.addResources(builder, resourcesOffset);
                return GameMap.endGameMap(builder);
            };
            return GameMap;
        }());
        schema.GameMap = GameMap;
    })(schema = battlecode.schema || (battlecode.schema = {}));
})(battlecode = exports.battlecode || (exports.battlecode = {}));
/**
 * Metadata about all bodies of a particular type.
 *
 * @constructor
 */
(function (battlecode) {
    var schema;
    (function (schema) {
        var BodyTypeMetadata = /** @class */ (function () {
            function BodyTypeMetadata() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns BodyTypeMetadata
             */
            BodyTypeMetadata.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param BodyTypeMetadata= obj
             * @returns BodyTypeMetadata
             */
            BodyTypeMetadata.getRootAsBodyTypeMetadata = function (bb, obj) {
                return (obj || new BodyTypeMetadata).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            };
            ;
            /**
             * @returns battlecode.schema.BodyType
             */
            BodyTypeMetadata.prototype.type = function () {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? /**  */ (this.bb.readInt8(this.bb_pos + offset)) : battlecode.schema.BodyType.HEADQUARTERS;
            };
            ;
            /**
             * @returns number
             */
            BodyTypeMetadata.prototype.buildCostAd = function () {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns number
             */
            BodyTypeMetadata.prototype.buildCostMn = function () {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns number
             */
            BodyTypeMetadata.prototype.buildCostEx = function () {
                var offset = this.bb.__offset(this.bb_pos, 10);
                return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns number
             */
            BodyTypeMetadata.prototype.actionCooldown = function () {
                var offset = this.bb.__offset(this.bb_pos, 12);
                return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns number
             */
            BodyTypeMetadata.prototype.movementCooldown = function () {
                var offset = this.bb.__offset(this.bb_pos, 14);
                return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns number
             */
            BodyTypeMetadata.prototype.health = function () {
                var offset = this.bb.__offset(this.bb_pos, 16);
                return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns number
             */
            BodyTypeMetadata.prototype.actionRadiusSquared = function () {
                var offset = this.bb.__offset(this.bb_pos, 18);
                return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns number
             */
            BodyTypeMetadata.prototype.visionRadiusSquared = function () {
                var offset = this.bb.__offset(this.bb_pos, 20);
                return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns number
             */
            BodyTypeMetadata.prototype.bytecodeLimit = function () {
                var offset = this.bb.__offset(this.bb_pos, 22);
                return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            BodyTypeMetadata.startBodyTypeMetadata = function (builder) {
                builder.startObject(10);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param battlecode.schema.BodyType type
             */
            BodyTypeMetadata.addType = function (builder, type) {
                builder.addFieldInt8(0, type, battlecode.schema.BodyType.HEADQUARTERS);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number buildCostAd
             */
            BodyTypeMetadata.addBuildCostAd = function (builder, buildCostAd) {
                builder.addFieldInt32(1, buildCostAd, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number buildCostMn
             */
            BodyTypeMetadata.addBuildCostMn = function (builder, buildCostMn) {
                builder.addFieldInt32(2, buildCostMn, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number buildCostEx
             */
            BodyTypeMetadata.addBuildCostEx = function (builder, buildCostEx) {
                builder.addFieldInt32(3, buildCostEx, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number actionCooldown
             */
            BodyTypeMetadata.addActionCooldown = function (builder, actionCooldown) {
                builder.addFieldInt32(4, actionCooldown, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number movementCooldown
             */
            BodyTypeMetadata.addMovementCooldown = function (builder, movementCooldown) {
                builder.addFieldInt32(5, movementCooldown, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number health
             */
            BodyTypeMetadata.addHealth = function (builder, health) {
                builder.addFieldInt32(6, health, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number actionRadiusSquared
             */
            BodyTypeMetadata.addActionRadiusSquared = function (builder, actionRadiusSquared) {
                builder.addFieldInt32(7, actionRadiusSquared, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number visionRadiusSquared
             */
            BodyTypeMetadata.addVisionRadiusSquared = function (builder, visionRadiusSquared) {
                builder.addFieldInt32(8, visionRadiusSquared, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number bytecodeLimit
             */
            BodyTypeMetadata.addBytecodeLimit = function (builder, bytecodeLimit) {
                builder.addFieldInt32(9, bytecodeLimit, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            BodyTypeMetadata.endBodyTypeMetadata = function (builder) {
                var offset = builder.endObject();
                return offset;
            };
            ;
            BodyTypeMetadata.createBodyTypeMetadata = function (builder, type, buildCostAd, buildCostMn, buildCostEx, actionCooldown, movementCooldown, health, actionRadiusSquared, visionRadiusSquared, bytecodeLimit) {
                BodyTypeMetadata.startBodyTypeMetadata(builder);
                BodyTypeMetadata.addType(builder, type);
                BodyTypeMetadata.addBuildCostAd(builder, buildCostAd);
                BodyTypeMetadata.addBuildCostMn(builder, buildCostMn);
                BodyTypeMetadata.addBuildCostEx(builder, buildCostEx);
                BodyTypeMetadata.addActionCooldown(builder, actionCooldown);
                BodyTypeMetadata.addMovementCooldown(builder, movementCooldown);
                BodyTypeMetadata.addHealth(builder, health);
                BodyTypeMetadata.addActionRadiusSquared(builder, actionRadiusSquared);
                BodyTypeMetadata.addVisionRadiusSquared(builder, visionRadiusSquared);
                BodyTypeMetadata.addBytecodeLimit(builder, bytecodeLimit);
                return BodyTypeMetadata.endBodyTypeMetadata(builder);
            };
            return BodyTypeMetadata;
        }());
        schema.BodyTypeMetadata = BodyTypeMetadata;
    })(schema = battlecode.schema || (battlecode.schema = {}));
})(battlecode = exports.battlecode || (exports.battlecode = {}));
/**
 * Data relevant to a particular team.
 *
 * @constructor
 */
(function (battlecode) {
    var schema;
    (function (schema) {
        var TeamData = /** @class */ (function () {
            function TeamData() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns TeamData
             */
            TeamData.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param TeamData= obj
             * @returns TeamData
             */
            TeamData.getRootAsTeamData = function (bb, obj) {
                return (obj || new TeamData).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            };
            ;
            TeamData.prototype.name = function (optionalEncoding) {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
            };
            ;
            TeamData.prototype.packageName = function (optionalEncoding) {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
            };
            ;
            /**
             * The ID of the team this data pertains to.
             *
             * @returns number
             */
            TeamData.prototype.teamID = function () {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            TeamData.startTeamData = function (builder) {
                builder.startObject(3);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset nameOffset
             */
            TeamData.addName = function (builder, nameOffset) {
                builder.addFieldOffset(0, nameOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset packageNameOffset
             */
            TeamData.addPackageName = function (builder, packageNameOffset) {
                builder.addFieldOffset(1, packageNameOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number teamID
             */
            TeamData.addTeamID = function (builder, teamID) {
                builder.addFieldInt8(2, teamID, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            TeamData.endTeamData = function (builder) {
                var offset = builder.endObject();
                return offset;
            };
            ;
            TeamData.createTeamData = function (builder, nameOffset, packageNameOffset, teamID) {
                TeamData.startTeamData(builder);
                TeamData.addName(builder, nameOffset);
                TeamData.addPackageName(builder, packageNameOffset);
                TeamData.addTeamID(builder, teamID);
                return TeamData.endTeamData(builder);
            };
            return TeamData;
        }());
        schema.TeamData = TeamData;
    })(schema = battlecode.schema || (battlecode.schema = {}));
})(battlecode = exports.battlecode || (exports.battlecode = {}));
/**
 * These tables are set-up so that they match closely with speedscope's file format documented at
 * https://github.com/jlfwong/speedscope/wiki/Importing-from-custom-sources.
 * The client uses speedscope to show the recorded data in an interactive interface.
 * A single event in a profile. Represents either an open event (meaning a
 * method has been entered) or a close event (meaning the method was exited).
 *
 * @constructor
 */
(function (battlecode) {
    var schema;
    (function (schema) {
        var ProfilerEvent = /** @class */ (function () {
            function ProfilerEvent() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns ProfilerEvent
             */
            ProfilerEvent.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param ProfilerEvent= obj
             * @returns ProfilerEvent
             */
            ProfilerEvent.getRootAsProfilerEvent = function (bb, obj) {
                return (obj || new ProfilerEvent).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            };
            ;
            /**
             * Whether this is an open event (true) or a close event (false).
             *
             * @returns boolean
             */
            ProfilerEvent.prototype.isOpen = function () {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
            };
            ;
            /**
             * The bytecode counter at the time the event occurred.
             *
             * @returns number
             */
            ProfilerEvent.prototype.at = function () {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * The index of the method name in the ProfilerFile.frames array.
             *
             * @returns number
             */
            ProfilerEvent.prototype.frame = function () {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            ProfilerEvent.startProfilerEvent = function (builder) {
                builder.startObject(3);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param boolean isOpen
             */
            ProfilerEvent.addIsOpen = function (builder, isOpen) {
                builder.addFieldInt8(0, +isOpen, +false);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number at
             */
            ProfilerEvent.addAt = function (builder, at) {
                builder.addFieldInt32(1, at, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number frame
             */
            ProfilerEvent.addFrame = function (builder, frame) {
                builder.addFieldInt32(2, frame, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            ProfilerEvent.endProfilerEvent = function (builder) {
                var offset = builder.endObject();
                return offset;
            };
            ;
            ProfilerEvent.createProfilerEvent = function (builder, isOpen, at, frame) {
                ProfilerEvent.startProfilerEvent(builder);
                ProfilerEvent.addIsOpen(builder, isOpen);
                ProfilerEvent.addAt(builder, at);
                ProfilerEvent.addFrame(builder, frame);
                return ProfilerEvent.endProfilerEvent(builder);
            };
            return ProfilerEvent;
        }());
        schema.ProfilerEvent = ProfilerEvent;
    })(schema = battlecode.schema || (battlecode.schema = {}));
})(battlecode = exports.battlecode || (exports.battlecode = {}));
/**
 * A profile contains all events and is labeled with a name.
 *
 * @constructor
 */
(function (battlecode) {
    var schema;
    (function (schema) {
        var ProfilerProfile = /** @class */ (function () {
            function ProfilerProfile() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns ProfilerProfile
             */
            ProfilerProfile.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param ProfilerProfile= obj
             * @returns ProfilerProfile
             */
            ProfilerProfile.getRootAsProfilerProfile = function (bb, obj) {
                return (obj || new ProfilerProfile).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            };
            ;
            ProfilerProfile.prototype.name = function (optionalEncoding) {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
            };
            ;
            /**
             * The events that occurred in the profile.
             *
             * @param number index
             * @param battlecode.schema.ProfilerEvent= obj
             * @returns battlecode.schema.ProfilerEvent
             */
            ProfilerProfile.prototype.events = function (index, obj) {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? (obj || new battlecode.schema.ProfilerEvent).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
            };
            ;
            /**
             * @returns number
             */
            ProfilerProfile.prototype.eventsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            ProfilerProfile.startProfilerProfile = function (builder) {
                builder.startObject(2);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset nameOffset
             */
            ProfilerProfile.addName = function (builder, nameOffset) {
                builder.addFieldOffset(0, nameOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset eventsOffset
             */
            ProfilerProfile.addEvents = function (builder, eventsOffset) {
                builder.addFieldOffset(1, eventsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<flatbuffers.Offset> data
             * @returns flatbuffers.Offset
             */
            ProfilerProfile.createEventsVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addOffset(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            ProfilerProfile.startEventsVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            ProfilerProfile.endProfilerProfile = function (builder) {
                var offset = builder.endObject();
                return offset;
            };
            ;
            ProfilerProfile.createProfilerProfile = function (builder, nameOffset, eventsOffset) {
                ProfilerProfile.startProfilerProfile(builder);
                ProfilerProfile.addName(builder, nameOffset);
                ProfilerProfile.addEvents(builder, eventsOffset);
                return ProfilerProfile.endProfilerProfile(builder);
            };
            return ProfilerProfile;
        }());
        schema.ProfilerProfile = ProfilerProfile;
    })(schema = battlecode.schema || (battlecode.schema = {}));
})(battlecode = exports.battlecode || (exports.battlecode = {}));
/**
 * A profiler file is a collection of profiles.
 * When profiling is enabled there is one of these per team per match.
 *
 * @constructor
 */
(function (battlecode) {
    var schema;
    (function (schema) {
        var ProfilerFile = /** @class */ (function () {
            function ProfilerFile() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns ProfilerFile
             */
            ProfilerFile.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param ProfilerFile= obj
             * @returns ProfilerFile
             */
            ProfilerFile.getRootAsProfilerFile = function (bb, obj) {
                return (obj || new ProfilerFile).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            };
            ;
            ProfilerFile.prototype.frames = function (index, optionalEncoding) {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
            };
            ;
            /**
             * @returns number
             */
            ProfilerFile.prototype.framesLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * The recorded profiles, one per robot.
             *
             * @param number index
             * @param battlecode.schema.ProfilerProfile= obj
             * @returns battlecode.schema.ProfilerProfile
             */
            ProfilerFile.prototype.profiles = function (index, obj) {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? (obj || new battlecode.schema.ProfilerProfile).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
            };
            ;
            /**
             * @returns number
             */
            ProfilerFile.prototype.profilesLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            ProfilerFile.startProfilerFile = function (builder) {
                builder.startObject(2);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset framesOffset
             */
            ProfilerFile.addFrames = function (builder, framesOffset) {
                builder.addFieldOffset(0, framesOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<flatbuffers.Offset> data
             * @returns flatbuffers.Offset
             */
            ProfilerFile.createFramesVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addOffset(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            ProfilerFile.startFramesVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset profilesOffset
             */
            ProfilerFile.addProfiles = function (builder, profilesOffset) {
                builder.addFieldOffset(1, profilesOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<flatbuffers.Offset> data
             * @returns flatbuffers.Offset
             */
            ProfilerFile.createProfilesVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addOffset(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            ProfilerFile.startProfilesVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            ProfilerFile.endProfilerFile = function (builder) {
                var offset = builder.endObject();
                return offset;
            };
            ;
            ProfilerFile.createProfilerFile = function (builder, framesOffset, profilesOffset) {
                ProfilerFile.startProfilerFile(builder);
                ProfilerFile.addFrames(builder, framesOffset);
                ProfilerFile.addProfiles(builder, profilesOffset);
                return ProfilerFile.endProfilerFile(builder);
            };
            return ProfilerFile;
        }());
        schema.ProfilerFile = ProfilerFile;
    })(schema = battlecode.schema || (battlecode.schema = {}));
})(battlecode = exports.battlecode || (exports.battlecode = {}));
/**
 * @constructor
 */
(function (battlecode) {
    var schema;
    (function (schema) {
        var Constants = /** @class */ (function () {
            function Constants() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns Constants
             */
            Constants.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param Constants= obj
             * @returns Constants
             */
            Constants.getRootAsConstants = function (bb, obj) {
                return (obj || new Constants).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            };
            ;
            /**
             * @returns number
             */
            Constants.prototype.increasePeriod = function () {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns number
             */
            Constants.prototype.AdAdditiveIncrease = function () {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns number
             */
            Constants.prototype.MnAdditiveIncrease = function () {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            Constants.startConstants = function (builder) {
                builder.startObject(3);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number increasePeriod
             */
            Constants.addIncreasePeriod = function (builder, increasePeriod) {
                builder.addFieldInt32(0, increasePeriod, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number AdAdditiveIncrease
             */
            Constants.addAdAdditiveIncrease = function (builder, AdAdditiveIncrease) {
                builder.addFieldInt32(1, AdAdditiveIncrease, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number MnAdditiveIncrease
             */
            Constants.addMnAdditiveIncrease = function (builder, MnAdditiveIncrease) {
                builder.addFieldInt32(2, MnAdditiveIncrease, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            Constants.endConstants = function (builder) {
                var offset = builder.endObject();
                return offset;
            };
            ;
            Constants.createConstants = function (builder, increasePeriod, AdAdditiveIncrease, MnAdditiveIncrease) {
                Constants.startConstants(builder);
                Constants.addIncreasePeriod(builder, increasePeriod);
                Constants.addAdAdditiveIncrease(builder, AdAdditiveIncrease);
                Constants.addMnAdditiveIncrease(builder, MnAdditiveIncrease);
                return Constants.endConstants(builder);
            };
            return Constants;
        }());
        schema.Constants = Constants;
    })(schema = battlecode.schema || (battlecode.schema = {}));
})(battlecode = exports.battlecode || (exports.battlecode = {}));
/**
 * The first event sent in the game. Contains all metadata about the game.
 *
 * @constructor
 */
(function (battlecode) {
    var schema;
    (function (schema) {
        var GameHeader = /** @class */ (function () {
            function GameHeader() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns GameHeader
             */
            GameHeader.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param GameHeader= obj
             * @returns GameHeader
             */
            GameHeader.getRootAsGameHeader = function (bb, obj) {
                return (obj || new GameHeader).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            };
            ;
            GameHeader.prototype.specVersion = function (optionalEncoding) {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
            };
            ;
            /**
             * The teams participating in the game.
             *
             * @param number index
             * @param battlecode.schema.TeamData= obj
             * @returns battlecode.schema.TeamData
             */
            GameHeader.prototype.teams = function (index, obj) {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? (obj || new battlecode.schema.TeamData).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
            };
            ;
            /**
             * @returns number
             */
            GameHeader.prototype.teamsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * Information about all body types in the game.
             *
             * @param number index
             * @param battlecode.schema.BodyTypeMetadata= obj
             * @returns battlecode.schema.BodyTypeMetadata
             */
            GameHeader.prototype.bodyTypeMetadata = function (index, obj) {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? (obj || new battlecode.schema.BodyTypeMetadata).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
            };
            ;
            /**
             * @returns number
             */
            GameHeader.prototype.bodyTypeMetadataLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @param battlecode.schema.Constants= obj
             * @returns battlecode.schema.Constants|null
             */
            GameHeader.prototype.constants = function (obj) {
                var offset = this.bb.__offset(this.bb_pos, 10);
                return offset ? (obj || new battlecode.schema.Constants).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            GameHeader.startGameHeader = function (builder) {
                builder.startObject(4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset specVersionOffset
             */
            GameHeader.addSpecVersion = function (builder, specVersionOffset) {
                builder.addFieldOffset(0, specVersionOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset teamsOffset
             */
            GameHeader.addTeams = function (builder, teamsOffset) {
                builder.addFieldOffset(1, teamsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<flatbuffers.Offset> data
             * @returns flatbuffers.Offset
             */
            GameHeader.createTeamsVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addOffset(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            GameHeader.startTeamsVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset bodyTypeMetadataOffset
             */
            GameHeader.addBodyTypeMetadata = function (builder, bodyTypeMetadataOffset) {
                builder.addFieldOffset(2, bodyTypeMetadataOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<flatbuffers.Offset> data
             * @returns flatbuffers.Offset
             */
            GameHeader.createBodyTypeMetadataVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addOffset(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            GameHeader.startBodyTypeMetadataVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset constantsOffset
             */
            GameHeader.addConstants = function (builder, constantsOffset) {
                builder.addFieldOffset(3, constantsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            GameHeader.endGameHeader = function (builder) {
                var offset = builder.endObject();
                return offset;
            };
            ;
            GameHeader.createGameHeader = function (builder, specVersionOffset, teamsOffset, bodyTypeMetadataOffset, constantsOffset) {
                GameHeader.startGameHeader(builder);
                GameHeader.addSpecVersion(builder, specVersionOffset);
                GameHeader.addTeams(builder, teamsOffset);
                GameHeader.addBodyTypeMetadata(builder, bodyTypeMetadataOffset);
                GameHeader.addConstants(builder, constantsOffset);
                return GameHeader.endGameHeader(builder);
            };
            return GameHeader;
        }());
        schema.GameHeader = GameHeader;
    })(schema = battlecode.schema || (battlecode.schema = {}));
})(battlecode = exports.battlecode || (exports.battlecode = {}));
/**
 * The final event sent in the game.
 *
 * @constructor
 */
(function (battlecode) {
    var schema;
    (function (schema) {
        var GameFooter = /** @class */ (function () {
            function GameFooter() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns GameFooter
             */
            GameFooter.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param GameFooter= obj
             * @returns GameFooter
             */
            GameFooter.getRootAsGameFooter = function (bb, obj) {
                return (obj || new GameFooter).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            };
            ;
            /**
             * The ID of the winning team of the game.
             *
             * @returns number
             */
            GameFooter.prototype.winner = function () {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            GameFooter.startGameFooter = function (builder) {
                builder.startObject(1);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number winner
             */
            GameFooter.addWinner = function (builder, winner) {
                builder.addFieldInt8(0, winner, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            GameFooter.endGameFooter = function (builder) {
                var offset = builder.endObject();
                return offset;
            };
            ;
            GameFooter.createGameFooter = function (builder, winner) {
                GameFooter.startGameFooter(builder);
                GameFooter.addWinner(builder, winner);
                return GameFooter.endGameFooter(builder);
            };
            return GameFooter;
        }());
        schema.GameFooter = GameFooter;
    })(schema = battlecode.schema || (battlecode.schema = {}));
})(battlecode = exports.battlecode || (exports.battlecode = {}));
/**
 * Sent to start a match.
 *
 * @constructor
 */
(function (battlecode) {
    var schema;
    (function (schema) {
        var MatchHeader = /** @class */ (function () {
            function MatchHeader() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns MatchHeader
             */
            MatchHeader.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param MatchHeader= obj
             * @returns MatchHeader
             */
            MatchHeader.getRootAsMatchHeader = function (bb, obj) {
                return (obj || new MatchHeader).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            };
            ;
            /**
             * The map the match was played on.
             *
             * @param battlecode.schema.GameMap= obj
             * @returns battlecode.schema.GameMap|null
             */
            MatchHeader.prototype.map = function (obj) {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? (obj || new battlecode.schema.GameMap).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
            };
            ;
            /**
             * The maximum number of rounds in this match.
             *
             * @returns number
             */
            MatchHeader.prototype.maxRounds = function () {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            MatchHeader.startMatchHeader = function (builder) {
                builder.startObject(2);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset mapOffset
             */
            MatchHeader.addMap = function (builder, mapOffset) {
                builder.addFieldOffset(0, mapOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number maxRounds
             */
            MatchHeader.addMaxRounds = function (builder, maxRounds) {
                builder.addFieldInt32(1, maxRounds, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            MatchHeader.endMatchHeader = function (builder) {
                var offset = builder.endObject();
                return offset;
            };
            ;
            MatchHeader.createMatchHeader = function (builder, mapOffset, maxRounds) {
                MatchHeader.startMatchHeader(builder);
                MatchHeader.addMap(builder, mapOffset);
                MatchHeader.addMaxRounds(builder, maxRounds);
                return MatchHeader.endMatchHeader(builder);
            };
            return MatchHeader;
        }());
        schema.MatchHeader = MatchHeader;
    })(schema = battlecode.schema || (battlecode.schema = {}));
})(battlecode = exports.battlecode || (exports.battlecode = {}));
/**
 * Sent to end a match.
 *
 * @constructor
 */
(function (battlecode) {
    var schema;
    (function (schema) {
        var MatchFooter = /** @class */ (function () {
            function MatchFooter() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns MatchFooter
             */
            MatchFooter.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param MatchFooter= obj
             * @returns MatchFooter
             */
            MatchFooter.getRootAsMatchFooter = function (bb, obj) {
                return (obj || new MatchFooter).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            };
            ;
            /**
             * The ID of the winning team.
             *
             * @returns number
             */
            MatchFooter.prototype.winner = function () {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * The number of rounds played.
             *
             * @returns number
             */
            MatchFooter.prototype.totalRounds = function () {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * Profiler data for team A and B if profiling is enabled.
             *
             * @param number index
             * @param battlecode.schema.ProfilerFile= obj
             * @returns battlecode.schema.ProfilerFile
             */
            MatchFooter.prototype.profilerFiles = function (index, obj) {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? (obj || new battlecode.schema.ProfilerFile).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
            };
            ;
            /**
             * @returns number
             */
            MatchFooter.prototype.profilerFilesLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            MatchFooter.startMatchFooter = function (builder) {
                builder.startObject(3);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number winner
             */
            MatchFooter.addWinner = function (builder, winner) {
                builder.addFieldInt8(0, winner, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number totalRounds
             */
            MatchFooter.addTotalRounds = function (builder, totalRounds) {
                builder.addFieldInt32(1, totalRounds, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset profilerFilesOffset
             */
            MatchFooter.addProfilerFiles = function (builder, profilerFilesOffset) {
                builder.addFieldOffset(2, profilerFilesOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<flatbuffers.Offset> data
             * @returns flatbuffers.Offset
             */
            MatchFooter.createProfilerFilesVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addOffset(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            MatchFooter.startProfilerFilesVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            MatchFooter.endMatchFooter = function (builder) {
                var offset = builder.endObject();
                return offset;
            };
            ;
            MatchFooter.createMatchFooter = function (builder, winner, totalRounds, profilerFilesOffset) {
                MatchFooter.startMatchFooter(builder);
                MatchFooter.addWinner(builder, winner);
                MatchFooter.addTotalRounds(builder, totalRounds);
                MatchFooter.addProfilerFiles(builder, profilerFilesOffset);
                return MatchFooter.endMatchFooter(builder);
            };
            return MatchFooter;
        }());
        schema.MatchFooter = MatchFooter;
    })(schema = battlecode.schema || (battlecode.schema = {}));
})(battlecode = exports.battlecode || (exports.battlecode = {}));
/**
 * A single time-step in a Game.
 * The bulk of the data in the file is stored in tables like this.
 * Note that a struct-of-arrays format is more space efficient than an array-
 * of-structs.
 *
 * @constructor
 */
(function (battlecode) {
    var schema;
    (function (schema) {
        var Round = /** @class */ (function () {
            function Round() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns Round
             */
            Round.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param Round= obj
             * @returns Round
             */
            Round.getRootAsRound = function (bb, obj) {
                return (obj || new Round).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            };
            ;
            /**
             * The IDs of teams in the Game.
             *
             * @param number index
             * @returns number
             */
            Round.prototype.teamIDs = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.teamIDsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            Round.prototype.teamIDsArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The total amount of Ad change of this team, this round
             *
             * @param number index
             * @returns number
             */
            Round.prototype.teamAdChanges = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.teamAdChangesLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            Round.prototype.teamAdChangesArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The total amount of Mn change of this team, this round
             *
             * @param number index
             * @returns number
             */
            Round.prototype.teamMnChanges = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.teamMnChangesLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            Round.prototype.teamMnChangesArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The total amount of Ex change of this team, this round
             *
             * @param number index
             * @returns number
             */
            Round.prototype.teamExChanges = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 10);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.teamExChangesLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 10);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            Round.prototype.teamExChangesArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 10);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The IDs of bodies that moved.
             *
             * @param number index
             * @returns number
             */
            Round.prototype.movedIDs = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 12);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.movedIDsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 12);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            Round.prototype.movedIDsArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 12);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The new locations of bodies that have moved.
             *
             * @param battlecode.schema.VecTable= obj
             * @returns battlecode.schema.VecTable|null
             */
            Round.prototype.movedLocs = function (obj) {
                var offset = this.bb.__offset(this.bb_pos, 14);
                return offset ? (obj || new battlecode.schema.VecTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
            };
            ;
            /**
             * New bodies.
             *
             * @param battlecode.schema.SpawnedBodyTable= obj
             * @returns battlecode.schema.SpawnedBodyTable|null
             */
            Round.prototype.spawnedBodies = function (obj) {
                var offset = this.bb.__offset(this.bb_pos, 16);
                return offset ? (obj || new battlecode.schema.SpawnedBodyTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
            };
            ;
            /**
             * The IDs of bodies that died.
             *
             * @param number index
             * @returns number
             */
            Round.prototype.diedIDs = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 18);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.diedIDsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 18);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            Round.prototype.diedIDsArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 18);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The IDs of robots that performed actions.
             * IDs may repeat.
             *
             * @param number index
             * @returns number
             */
            Round.prototype.actionIDs = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 20);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.actionIDsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 20);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            Round.prototype.actionIDsArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 20);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The actions performed. These actions allow us to track many things about the current state.
             *
             * @param number index
             * @returns battlecode.schema.Action
             */
            Round.prototype.actions = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 22);
                return offset ? /**  */ (this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index)) : /**  */ (0);
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.actionsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 22);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int8Array
             */
            Round.prototype.actionsArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 22);
                return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The 'targets' of the performed actions. Actions without targets may have any value
             *
             * @param number index
             * @returns number
             */
            Round.prototype.actionTargets = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 24);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.actionTargetsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 24);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            Round.prototype.actionTargetsArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 24);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The IDs of all islands
             *
             * @param number index
             * @returns number
             */
            Round.prototype.islandIDs = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 26);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.islandIDsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 26);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            Round.prototype.islandIDsArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 26);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The number of turns the opposing team has been occupying each island
             *
             * @param number index
             * @returns number
             */
            Round.prototype.islandTurnoverTurns = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 28);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.islandTurnoverTurnsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 28);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            Round.prototype.islandTurnoverTurnsArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 28);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The teamID for the owners of each island.
             *
             * @param number index
             * @returns number
             */
            Round.prototype.islandOwnership = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 30);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.islandOwnershipLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 30);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            Round.prototype.islandOwnershipArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 30);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The locations of the resources wells being given resources as x + y*width
             *
             * @param number index
             * @returns number
             */
            Round.prototype.resourceWellLocs = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 32);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.resourceWellLocsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 32);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            Round.prototype.resourceWellLocsArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 32);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The adamantium stored in the well
             *
             * @param number index
             * @returns number
             */
            Round.prototype.wellAdamantiumValues = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 34);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.wellAdamantiumValuesLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 34);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            Round.prototype.wellAdamantiumValuesArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 34);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The mana stored in the well
             *
             * @param number index
             * @returns number
             */
            Round.prototype.wellManaValues = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 36);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.wellManaValuesLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 36);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            Round.prototype.wellManaValuesArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 36);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The elixir stored in the well
             *
             * @param number index
             * @returns number
             */
            Round.prototype.wellElixirValues = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 38);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.wellElixirValuesLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 38);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            Round.prototype.wellElixirValuesArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 38);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The ID for the resource this well contains
             *
             * @param number index
             * @returns number
             */
            Round.prototype.resourceID = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 40);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.resourceIDLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 40);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            Round.prototype.resourceIDArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 40);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The acceleration ID for this resource well: 1 is accelerated, 0 is not
             *
             * @param number index
             * @returns number
             */
            Round.prototype.wellAccelerationID = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 42);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.wellAccelerationIDLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 42);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            Round.prototype.wellAccelerationIDArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 42);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The IDs of the robots who changed their indicator strings
             *
             * @param number index
             * @returns number
             */
            Round.prototype.indicatorStringIDs = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 44);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.indicatorStringIDsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 44);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            Round.prototype.indicatorStringIDsArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 44);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            Round.prototype.indicatorStrings = function (index, optionalEncoding) {
                var offset = this.bb.__offset(this.bb_pos, 46);
                return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.indicatorStringsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 46);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * The IDs of bodies that set indicator dots
             *
             * @param number index
             * @returns number
             */
            Round.prototype.indicatorDotIDs = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 48);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.indicatorDotIDsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 48);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            Round.prototype.indicatorDotIDsArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 48);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The location of the indicator dots
             *
             * @param battlecode.schema.VecTable= obj
             * @returns battlecode.schema.VecTable|null
             */
            Round.prototype.indicatorDotLocs = function (obj) {
                var offset = this.bb.__offset(this.bb_pos, 50);
                return offset ? (obj || new battlecode.schema.VecTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
            };
            ;
            /**
             * The RGB values of the indicator dots
             *
             * @param battlecode.schema.RGBTable= obj
             * @returns battlecode.schema.RGBTable|null
             */
            Round.prototype.indicatorDotRGBs = function (obj) {
                var offset = this.bb.__offset(this.bb_pos, 52);
                return offset ? (obj || new battlecode.schema.RGBTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
            };
            ;
            /**
             * The IDs of bodies that set indicator lines
             *
             * @param number index
             * @returns number
             */
            Round.prototype.indicatorLineIDs = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 54);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.indicatorLineIDsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 54);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            Round.prototype.indicatorLineIDsArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 54);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The start location of the indicator lines
             *
             * @param battlecode.schema.VecTable= obj
             * @returns battlecode.schema.VecTable|null
             */
            Round.prototype.indicatorLineStartLocs = function (obj) {
                var offset = this.bb.__offset(this.bb_pos, 56);
                return offset ? (obj || new battlecode.schema.VecTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
            };
            ;
            /**
             * The end location of the indicator lines
             *
             * @param battlecode.schema.VecTable= obj
             * @returns battlecode.schema.VecTable|null
             */
            Round.prototype.indicatorLineEndLocs = function (obj) {
                var offset = this.bb.__offset(this.bb_pos, 58);
                return offset ? (obj || new battlecode.schema.VecTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
            };
            ;
            /**
             * The RGB values of the indicator lines
             *
             * @param battlecode.schema.RGBTable= obj
             * @returns battlecode.schema.RGBTable|null
             */
            Round.prototype.indicatorLineRGBs = function (obj) {
                var offset = this.bb.__offset(this.bb_pos, 60);
                return offset ? (obj || new battlecode.schema.RGBTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
            };
            ;
            /**
             * The first sent Round in a match should have index 1. (The starting state,
             * created by the MatchHeader, can be thought to have index 0.)
             * It should increase by one for each following round.
             *
             * @returns number
             */
            Round.prototype.roundID = function () {
                var offset = this.bb.__offset(this.bb_pos, 62);
                return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * The IDs of player bodies.
             *
             * @param number index
             * @returns number
             */
            Round.prototype.bytecodeIDs = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 64);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.bytecodeIDsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 64);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            Round.prototype.bytecodeIDsArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 64);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The bytecodes used by the player bodies.
             *
             * @param number index
             * @returns number
             */
            Round.prototype.bytecodesUsed = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 66);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            Round.prototype.bytecodesUsedLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 66);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            Round.prototype.bytecodesUsedArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 66);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            Round.startRound = function (builder) {
                builder.startObject(32);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset teamIDsOffset
             */
            Round.addTeamIDs = function (builder, teamIDsOffset) {
                builder.addFieldOffset(0, teamIDsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            Round.createTeamIDsVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startTeamIDsVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset teamAdChangesOffset
             */
            Round.addTeamAdChanges = function (builder, teamAdChangesOffset) {
                builder.addFieldOffset(1, teamAdChangesOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            Round.createTeamAdChangesVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startTeamAdChangesVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset teamMnChangesOffset
             */
            Round.addTeamMnChanges = function (builder, teamMnChangesOffset) {
                builder.addFieldOffset(2, teamMnChangesOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            Round.createTeamMnChangesVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startTeamMnChangesVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset teamExChangesOffset
             */
            Round.addTeamExChanges = function (builder, teamExChangesOffset) {
                builder.addFieldOffset(3, teamExChangesOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            Round.createTeamExChangesVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startTeamExChangesVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset movedIDsOffset
             */
            Round.addMovedIDs = function (builder, movedIDsOffset) {
                builder.addFieldOffset(4, movedIDsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            Round.createMovedIDsVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startMovedIDsVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset movedLocsOffset
             */
            Round.addMovedLocs = function (builder, movedLocsOffset) {
                builder.addFieldOffset(5, movedLocsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset spawnedBodiesOffset
             */
            Round.addSpawnedBodies = function (builder, spawnedBodiesOffset) {
                builder.addFieldOffset(6, spawnedBodiesOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset diedIDsOffset
             */
            Round.addDiedIDs = function (builder, diedIDsOffset) {
                builder.addFieldOffset(7, diedIDsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            Round.createDiedIDsVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startDiedIDsVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset actionIDsOffset
             */
            Round.addActionIDs = function (builder, actionIDsOffset) {
                builder.addFieldOffset(8, actionIDsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            Round.createActionIDsVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startActionIDsVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset actionsOffset
             */
            Round.addActions = function (builder, actionsOffset) {
                builder.addFieldOffset(9, actionsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<battlecode.schema.Action> data
             * @returns flatbuffers.Offset
             */
            Round.createActionsVector = function (builder, data) {
                builder.startVector(1, data.length, 1);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt8(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startActionsVector = function (builder, numElems) {
                builder.startVector(1, numElems, 1);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset actionTargetsOffset
             */
            Round.addActionTargets = function (builder, actionTargetsOffset) {
                builder.addFieldOffset(10, actionTargetsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            Round.createActionTargetsVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startActionTargetsVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset islandIDsOffset
             */
            Round.addIslandIDs = function (builder, islandIDsOffset) {
                builder.addFieldOffset(11, islandIDsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            Round.createIslandIDsVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startIslandIDsVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset islandTurnoverTurnsOffset
             */
            Round.addIslandTurnoverTurns = function (builder, islandTurnoverTurnsOffset) {
                builder.addFieldOffset(12, islandTurnoverTurnsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            Round.createIslandTurnoverTurnsVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startIslandTurnoverTurnsVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset islandOwnershipOffset
             */
            Round.addIslandOwnership = function (builder, islandOwnershipOffset) {
                builder.addFieldOffset(13, islandOwnershipOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            Round.createIslandOwnershipVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startIslandOwnershipVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset resourceWellLocsOffset
             */
            Round.addResourceWellLocs = function (builder, resourceWellLocsOffset) {
                builder.addFieldOffset(14, resourceWellLocsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            Round.createResourceWellLocsVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startResourceWellLocsVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset wellAdamantiumValuesOffset
             */
            Round.addWellAdamantiumValues = function (builder, wellAdamantiumValuesOffset) {
                builder.addFieldOffset(15, wellAdamantiumValuesOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            Round.createWellAdamantiumValuesVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startWellAdamantiumValuesVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset wellManaValuesOffset
             */
            Round.addWellManaValues = function (builder, wellManaValuesOffset) {
                builder.addFieldOffset(16, wellManaValuesOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            Round.createWellManaValuesVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startWellManaValuesVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset wellElixirValuesOffset
             */
            Round.addWellElixirValues = function (builder, wellElixirValuesOffset) {
                builder.addFieldOffset(17, wellElixirValuesOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            Round.createWellElixirValuesVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startWellElixirValuesVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset resourceIDOffset
             */
            Round.addResourceID = function (builder, resourceIDOffset) {
                builder.addFieldOffset(18, resourceIDOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            Round.createResourceIDVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startResourceIDVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset wellAccelerationIDOffset
             */
            Round.addWellAccelerationID = function (builder, wellAccelerationIDOffset) {
                builder.addFieldOffset(19, wellAccelerationIDOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            Round.createWellAccelerationIDVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startWellAccelerationIDVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset indicatorStringIDsOffset
             */
            Round.addIndicatorStringIDs = function (builder, indicatorStringIDsOffset) {
                builder.addFieldOffset(20, indicatorStringIDsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            Round.createIndicatorStringIDsVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startIndicatorStringIDsVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset indicatorStringsOffset
             */
            Round.addIndicatorStrings = function (builder, indicatorStringsOffset) {
                builder.addFieldOffset(21, indicatorStringsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<flatbuffers.Offset> data
             * @returns flatbuffers.Offset
             */
            Round.createIndicatorStringsVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addOffset(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startIndicatorStringsVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset indicatorDotIDsOffset
             */
            Round.addIndicatorDotIDs = function (builder, indicatorDotIDsOffset) {
                builder.addFieldOffset(22, indicatorDotIDsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            Round.createIndicatorDotIDsVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startIndicatorDotIDsVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset indicatorDotLocsOffset
             */
            Round.addIndicatorDotLocs = function (builder, indicatorDotLocsOffset) {
                builder.addFieldOffset(23, indicatorDotLocsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset indicatorDotRGBsOffset
             */
            Round.addIndicatorDotRGBs = function (builder, indicatorDotRGBsOffset) {
                builder.addFieldOffset(24, indicatorDotRGBsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset indicatorLineIDsOffset
             */
            Round.addIndicatorLineIDs = function (builder, indicatorLineIDsOffset) {
                builder.addFieldOffset(25, indicatorLineIDsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            Round.createIndicatorLineIDsVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startIndicatorLineIDsVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset indicatorLineStartLocsOffset
             */
            Round.addIndicatorLineStartLocs = function (builder, indicatorLineStartLocsOffset) {
                builder.addFieldOffset(26, indicatorLineStartLocsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset indicatorLineEndLocsOffset
             */
            Round.addIndicatorLineEndLocs = function (builder, indicatorLineEndLocsOffset) {
                builder.addFieldOffset(27, indicatorLineEndLocsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset indicatorLineRGBsOffset
             */
            Round.addIndicatorLineRGBs = function (builder, indicatorLineRGBsOffset) {
                builder.addFieldOffset(28, indicatorLineRGBsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number roundID
             */
            Round.addRoundID = function (builder, roundID) {
                builder.addFieldInt32(29, roundID, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset bytecodeIDsOffset
             */
            Round.addBytecodeIDs = function (builder, bytecodeIDsOffset) {
                builder.addFieldOffset(30, bytecodeIDsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            Round.createBytecodeIDsVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startBytecodeIDsVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset bytecodesUsedOffset
             */
            Round.addBytecodesUsed = function (builder, bytecodesUsedOffset) {
                builder.addFieldOffset(31, bytecodesUsedOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            Round.createBytecodesUsedVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            Round.startBytecodesUsedVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            Round.endRound = function (builder) {
                var offset = builder.endObject();
                return offset;
            };
            ;
            Round.createRound = function (builder, teamIDsOffset, teamAdChangesOffset, teamMnChangesOffset, teamExChangesOffset, movedIDsOffset, movedLocsOffset, spawnedBodiesOffset, diedIDsOffset, actionIDsOffset, actionsOffset, actionTargetsOffset, islandIDsOffset, islandTurnoverTurnsOffset, islandOwnershipOffset, resourceWellLocsOffset, wellAdamantiumValuesOffset, wellManaValuesOffset, wellElixirValuesOffset, resourceIDOffset, wellAccelerationIDOffset, indicatorStringIDsOffset, indicatorStringsOffset, indicatorDotIDsOffset, indicatorDotLocsOffset, indicatorDotRGBsOffset, indicatorLineIDsOffset, indicatorLineStartLocsOffset, indicatorLineEndLocsOffset, indicatorLineRGBsOffset, roundID, bytecodeIDsOffset, bytecodesUsedOffset) {
                Round.startRound(builder);
                Round.addTeamIDs(builder, teamIDsOffset);
                Round.addTeamAdChanges(builder, teamAdChangesOffset);
                Round.addTeamMnChanges(builder, teamMnChangesOffset);
                Round.addTeamExChanges(builder, teamExChangesOffset);
                Round.addMovedIDs(builder, movedIDsOffset);
                Round.addMovedLocs(builder, movedLocsOffset);
                Round.addSpawnedBodies(builder, spawnedBodiesOffset);
                Round.addDiedIDs(builder, diedIDsOffset);
                Round.addActionIDs(builder, actionIDsOffset);
                Round.addActions(builder, actionsOffset);
                Round.addActionTargets(builder, actionTargetsOffset);
                Round.addIslandIDs(builder, islandIDsOffset);
                Round.addIslandTurnoverTurns(builder, islandTurnoverTurnsOffset);
                Round.addIslandOwnership(builder, islandOwnershipOffset);
                Round.addResourceWellLocs(builder, resourceWellLocsOffset);
                Round.addWellAdamantiumValues(builder, wellAdamantiumValuesOffset);
                Round.addWellManaValues(builder, wellManaValuesOffset);
                Round.addWellElixirValues(builder, wellElixirValuesOffset);
                Round.addResourceID(builder, resourceIDOffset);
                Round.addWellAccelerationID(builder, wellAccelerationIDOffset);
                Round.addIndicatorStringIDs(builder, indicatorStringIDsOffset);
                Round.addIndicatorStrings(builder, indicatorStringsOffset);
                Round.addIndicatorDotIDs(builder, indicatorDotIDsOffset);
                Round.addIndicatorDotLocs(builder, indicatorDotLocsOffset);
                Round.addIndicatorDotRGBs(builder, indicatorDotRGBsOffset);
                Round.addIndicatorLineIDs(builder, indicatorLineIDsOffset);
                Round.addIndicatorLineStartLocs(builder, indicatorLineStartLocsOffset);
                Round.addIndicatorLineEndLocs(builder, indicatorLineEndLocsOffset);
                Round.addIndicatorLineRGBs(builder, indicatorLineRGBsOffset);
                Round.addRoundID(builder, roundID);
                Round.addBytecodeIDs(builder, bytecodeIDsOffset);
                Round.addBytecodesUsed(builder, bytecodesUsedOffset);
                return Round.endRound(builder);
            };
            return Round;
        }());
        schema.Round = Round;
    })(schema = battlecode.schema || (battlecode.schema = {}));
})(battlecode = exports.battlecode || (exports.battlecode = {}));
/**
 * Necessary due to flatbuffers requiring unions to be wrapped in tables.
 *
 * @constructor
 */
(function (battlecode) {
    var schema;
    (function (schema) {
        var EventWrapper = /** @class */ (function () {
            function EventWrapper() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns EventWrapper
             */
            EventWrapper.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param EventWrapper= obj
             * @returns EventWrapper
             */
            EventWrapper.getRootAsEventWrapper = function (bb, obj) {
                return (obj || new EventWrapper).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            };
            ;
            /**
             * @returns battlecode.schema.Event
             */
            EventWrapper.prototype.eType = function () {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? /**  */ (this.bb.readUint8(this.bb_pos + offset)) : battlecode.schema.Event.NONE;
            };
            ;
            /**
             * @param flatbuffers.Table obj
             * @returns ?flatbuffers.Table
             */
            EventWrapper.prototype.e = function (obj) {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            EventWrapper.startEventWrapper = function (builder) {
                builder.startObject(2);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param battlecode.schema.Event eType
             */
            EventWrapper.addEType = function (builder, eType) {
                builder.addFieldInt8(0, eType, battlecode.schema.Event.NONE);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset eOffset
             */
            EventWrapper.addE = function (builder, eOffset) {
                builder.addFieldOffset(1, eOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            EventWrapper.endEventWrapper = function (builder) {
                var offset = builder.endObject();
                return offset;
            };
            ;
            EventWrapper.createEventWrapper = function (builder, eType, eOffset) {
                EventWrapper.startEventWrapper(builder);
                EventWrapper.addEType(builder, eType);
                EventWrapper.addE(builder, eOffset);
                return EventWrapper.endEventWrapper(builder);
            };
            return EventWrapper;
        }());
        schema.EventWrapper = EventWrapper;
    })(schema = battlecode.schema || (battlecode.schema = {}));
})(battlecode = exports.battlecode || (exports.battlecode = {}));
/**
 * If events are not otherwise delimited, this wrapper structure
 * allows a game to be stored in a single buffer.
 * The first event will be a GameHeader; the last event will be a GameFooter.
 * matchHeaders[0] is the index of the 0th match header in the event stream,
 * corresponding to matchFooters[0]. These indices allow quick traversal of
 * the file.
 *
 * @constructor
 */
(function (battlecode) {
    var schema;
    (function (schema) {
        var GameWrapper = /** @class */ (function () {
            function GameWrapper() {
                this.bb = null;
                this.bb_pos = 0;
            }
            /**
             * @param number i
             * @param flatbuffers.ByteBuffer bb
             * @returns GameWrapper
             */
            GameWrapper.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @param flatbuffers.ByteBuffer bb
             * @param GameWrapper= obj
             * @returns GameWrapper
             */
            GameWrapper.getRootAsGameWrapper = function (bb, obj) {
                return (obj || new GameWrapper).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            };
            ;
            /**
             * The series of events comprising the game.
             *
             * @param number index
             * @param battlecode.schema.EventWrapper= obj
             * @returns battlecode.schema.EventWrapper
             */
            GameWrapper.prototype.events = function (index, obj) {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? (obj || new battlecode.schema.EventWrapper).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
            };
            ;
            /**
             * @returns number
             */
            GameWrapper.prototype.eventsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * The indices of the headers of the matches, in order.
             *
             * @param number index
             * @returns number
             */
            GameWrapper.prototype.matchHeaders = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            GameWrapper.prototype.matchHeadersLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            GameWrapper.prototype.matchHeadersArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * The indices of the footers of the matches, in order.
             *
             * @param number index
             * @returns number
             */
            GameWrapper.prototype.matchFooters = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
            };
            ;
            /**
             * @returns number
             */
            GameWrapper.prototype.matchFootersLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns Int32Array
             */
            GameWrapper.prototype.matchFootersArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             */
            GameWrapper.startGameWrapper = function (builder) {
                builder.startObject(3);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset eventsOffset
             */
            GameWrapper.addEvents = function (builder, eventsOffset) {
                builder.addFieldOffset(0, eventsOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<flatbuffers.Offset> data
             * @returns flatbuffers.Offset
             */
            GameWrapper.createEventsVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addOffset(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            GameWrapper.startEventsVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset matchHeadersOffset
             */
            GameWrapper.addMatchHeaders = function (builder, matchHeadersOffset) {
                builder.addFieldOffset(1, matchHeadersOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            GameWrapper.createMatchHeadersVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            GameWrapper.startMatchHeadersVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param flatbuffers.Offset matchFootersOffset
             */
            GameWrapper.addMatchFooters = function (builder, matchFootersOffset) {
                builder.addFieldOffset(2, matchFootersOffset, 0);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param Array.<number> data
             * @returns flatbuffers.Offset
             */
            GameWrapper.createMatchFootersVector = function (builder, data) {
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt32(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @param number numElems
             */
            GameWrapper.startMatchFootersVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param flatbuffers.Builder builder
             * @returns flatbuffers.Offset
             */
            GameWrapper.endGameWrapper = function (builder) {
                var offset = builder.endObject();
                return offset;
            };
            ;
            GameWrapper.createGameWrapper = function (builder, eventsOffset, matchHeadersOffset, matchFootersOffset) {
                GameWrapper.startGameWrapper(builder);
                GameWrapper.addEvents(builder, eventsOffset);
                GameWrapper.addMatchHeaders(builder, matchHeadersOffset);
                GameWrapper.addMatchFooters(builder, matchFootersOffset);
                return GameWrapper.endGameWrapper(builder);
            };
            return GameWrapper;
        }());
        schema.GameWrapper = GameWrapper;
    })(schema = battlecode.schema || (battlecode.schema = {}));
})(battlecode = exports.battlecode || (exports.battlecode = {}));
