"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.RobotTurn = void 0;
var flatbuffers = require("flatbuffers");
var RobotTurn = /** @class */ (function () {
    function RobotTurn() {
        this.bb = null;
        this.bb_pos = 0;
    }
    RobotTurn.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    RobotTurn.getRootAsRobotTurn = function (bb, obj) {
        return (obj || new RobotTurn()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    RobotTurn.getSizePrefixedRootAsRobotTurn = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new RobotTurn()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    RobotTurn.prototype.robotId = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    RobotTurn.prototype.health = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    RobotTurn.prototype.paint = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    RobotTurn.prototype.moveCooldown = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    RobotTurn.prototype.actionCooldown = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    RobotTurn.prototype.x = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
    };
    RobotTurn.prototype.y = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
    };
    RobotTurn.prototype.actionsType = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    RobotTurn.prototype.actionsTypeLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    RobotTurn.prototype.actionsTypeArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    RobotTurn.prototype.actions = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__union(obj, this.bb.__vector(this.bb_pos + offset) + index * 4) : null;
    };
    RobotTurn.prototype.actionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    RobotTurn.startRobotTurn = function (builder) {
        builder.startObject(9);
    };
    RobotTurn.addRobotId = function (builder, robotId) {
        builder.addFieldInt32(0, robotId, 0);
    };
    RobotTurn.addHealth = function (builder, health) {
        builder.addFieldInt32(1, health, 0);
    };
    RobotTurn.addPaint = function (builder, paint) {
        builder.addFieldInt32(2, paint, 0);
    };
    RobotTurn.addMoveCooldown = function (builder, moveCooldown) {
        builder.addFieldInt32(3, moveCooldown, 0);
    };
    RobotTurn.addActionCooldown = function (builder, actionCooldown) {
        builder.addFieldInt32(4, actionCooldown, 0);
    };
    RobotTurn.addX = function (builder, x) {
        builder.addFieldInt8(5, x, 0);
    };
    RobotTurn.addY = function (builder, y) {
        builder.addFieldInt8(6, y, 0);
    };
    RobotTurn.addActionsType = function (builder, actionsTypeOffset) {
        builder.addFieldOffset(7, actionsTypeOffset, 0);
    };
    RobotTurn.createActionsTypeVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    RobotTurn.startActionsTypeVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    RobotTurn.addActions = function (builder, actionsOffset) {
        builder.addFieldOffset(8, actionsOffset, 0);
    };
    RobotTurn.createActionsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    RobotTurn.startActionsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    RobotTurn.endRobotTurn = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    RobotTurn.createRobotTurn = function (builder, robotId, health, paint, moveCooldown, actionCooldown, x, y, actionsTypeOffset, actionsOffset) {
        RobotTurn.startRobotTurn(builder);
        RobotTurn.addRobotId(builder, robotId);
        RobotTurn.addHealth(builder, health);
        RobotTurn.addPaint(builder, paint);
        RobotTurn.addMoveCooldown(builder, moveCooldown);
        RobotTurn.addActionCooldown(builder, actionCooldown);
        RobotTurn.addX(builder, x);
        RobotTurn.addY(builder, y);
        RobotTurn.addActionsType(builder, actionsTypeOffset);
        RobotTurn.addActions(builder, actionsOffset);
        return RobotTurn.endRobotTurn(builder);
    };
    return RobotTurn;
}());
exports.RobotTurn = RobotTurn;
