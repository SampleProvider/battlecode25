"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.RGBTable = void 0;
var flatbuffers = require("flatbuffers");
var RGBTable = /** @class */ (function () {
    function RGBTable() {
        this.bb = null;
        this.bb_pos = 0;
    }
    RGBTable.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    RGBTable.getRootAsRGBTable = function (bb, obj) {
        return (obj || new RGBTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    RGBTable.getSizePrefixedRootAsRGBTable = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new RGBTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    RGBTable.prototype.red = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    RGBTable.prototype.redLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    RGBTable.prototype.redArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    RGBTable.prototype.green = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    RGBTable.prototype.greenLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    RGBTable.prototype.greenArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    RGBTable.prototype.blue = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    RGBTable.prototype.blueLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    RGBTable.prototype.blueArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    RGBTable.startRGBTable = function (builder) {
        builder.startObject(3);
    };
    RGBTable.addRed = function (builder, redOffset) {
        builder.addFieldOffset(0, redOffset, 0);
    };
    RGBTable.createRedVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    RGBTable.startRedVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    RGBTable.addGreen = function (builder, greenOffset) {
        builder.addFieldOffset(1, greenOffset, 0);
    };
    RGBTable.createGreenVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    RGBTable.startGreenVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    RGBTable.addBlue = function (builder, blueOffset) {
        builder.addFieldOffset(2, blueOffset, 0);
    };
    RGBTable.createBlueVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    RGBTable.startBlueVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    RGBTable.endRGBTable = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    RGBTable.createRGBTable = function (builder, redOffset, greenOffset, blueOffset) {
        RGBTable.startRGBTable(builder);
        RGBTable.addRed(builder, redOffset);
        RGBTable.addGreen(builder, greenOffset);
        RGBTable.addBlue(builder, blueOffset);
        return RGBTable.endRGBTable(builder);
    };
    return RGBTable;
}());
exports.RGBTable = RGBTable;
