"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpecializationMetadata = void 0;
var flatbuffers = require("flatbuffers");
var specialization_type_1 = require("../../battlecode/schema/specialization-type");
var SpecializationMetadata = /** @class */ (function () {
    function SpecializationMetadata() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SpecializationMetadata.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SpecializationMetadata.getRootAsSpecializationMetadata = function (bb, obj) {
        return (obj || new SpecializationMetadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SpecializationMetadata.getSizePrefixedRootAsSpecializationMetadata = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SpecializationMetadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SpecializationMetadata.prototype.type = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : specialization_type_1.SpecializationType.ATTACK;
    };
    SpecializationMetadata.prototype.level = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    SpecializationMetadata.prototype.actionCost = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    SpecializationMetadata.prototype.actionJailedPenalty = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    SpecializationMetadata.prototype.cooldownReduction = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    SpecializationMetadata.prototype.damageIncrease = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    SpecializationMetadata.prototype.healIncrease = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    SpecializationMetadata.startSpecializationMetadata = function (builder) {
        builder.startObject(7);
    };
    SpecializationMetadata.addType = function (builder, type) {
        builder.addFieldInt8(0, type, specialization_type_1.SpecializationType.ATTACK);
    };
    SpecializationMetadata.addLevel = function (builder, level) {
        builder.addFieldInt32(1, level, 0);
    };
    SpecializationMetadata.addActionCost = function (builder, actionCost) {
        builder.addFieldInt32(2, actionCost, 0);
    };
    SpecializationMetadata.addActionJailedPenalty = function (builder, actionJailedPenalty) {
        builder.addFieldInt32(3, actionJailedPenalty, 0);
    };
    SpecializationMetadata.addCooldownReduction = function (builder, cooldownReduction) {
        builder.addFieldInt32(4, cooldownReduction, 0);
    };
    SpecializationMetadata.addDamageIncrease = function (builder, damageIncrease) {
        builder.addFieldInt32(5, damageIncrease, 0);
    };
    SpecializationMetadata.addHealIncrease = function (builder, healIncrease) {
        builder.addFieldInt32(6, healIncrease, 0);
    };
    SpecializationMetadata.endSpecializationMetadata = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SpecializationMetadata.createSpecializationMetadata = function (builder, type, level, actionCost, actionJailedPenalty, cooldownReduction, damageIncrease, healIncrease) {
        SpecializationMetadata.startSpecializationMetadata(builder);
        SpecializationMetadata.addType(builder, type);
        SpecializationMetadata.addLevel(builder, level);
        SpecializationMetadata.addActionCost(builder, actionCost);
        SpecializationMetadata.addActionJailedPenalty(builder, actionJailedPenalty);
        SpecializationMetadata.addCooldownReduction(builder, cooldownReduction);
        SpecializationMetadata.addDamageIncrease(builder, damageIncrease);
        SpecializationMetadata.addHealIncrease(builder, healIncrease);
        return SpecializationMetadata.endSpecializationMetadata(builder);
    };
    return SpecializationMetadata;
}());
exports.SpecializationMetadata = SpecializationMetadata;
