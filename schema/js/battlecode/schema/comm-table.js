"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommTable = void 0;
var flatbuffers = require("flatbuffers");
var CommTable = /** @class */ (function () {
    function CommTable() {
        this.bb = null;
        this.bb_pos = 0;
    }
    CommTable.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    CommTable.getRootAsCommTable = function (bb, obj) {
        return (obj || new CommTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    CommTable.getSizePrefixedRootAsCommTable = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CommTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    CommTable.prototype.team1 = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    CommTable.prototype.team1Length = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    CommTable.prototype.team1Array = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    CommTable.prototype.team2 = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    CommTable.prototype.team2Length = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    CommTable.prototype.team2Array = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    CommTable.startCommTable = function (builder) {
        builder.startObject(2);
    };
    CommTable.addTeam1 = function (builder, team1Offset) {
        builder.addFieldOffset(0, team1Offset, 0);
    };
    CommTable.createTeam1Vector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    CommTable.startTeam1Vector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    CommTable.addTeam2 = function (builder, team2Offset) {
        builder.addFieldOffset(1, team2Offset, 0);
    };
    CommTable.createTeam2Vector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    CommTable.startTeam2Vector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    CommTable.endCommTable = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    CommTable.createCommTable = function (builder, team1Offset, team2Offset) {
        CommTable.startCommTable(builder);
        CommTable.addTeam1(builder, team1Offset);
        CommTable.addTeam2(builder, team2Offset);
        return CommTable.endCommTable(builder);
    };
    return CommTable;
}());
exports.CommTable = CommTable;
