"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.Constants = void 0;
var flatbuffers = require("flatbuffers");
var Constants = /** @class */ (function () {
    function Constants() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Constants.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Constants.getRootAsConstants = function (bb, obj) {
        return (obj || new Constants()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Constants.getSizePrefixedRootAsConstants = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Constants()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Constants.prototype.setupPhaseLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Constants.prototype.flagMinDistance = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Constants.prototype.globalUpgradeRoundDelay = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Constants.prototype.passiveResourceRate = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Constants.prototype.robotBaseHealth = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Constants.prototype.jailedRounds = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Constants.prototype.visionRadius = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Constants.prototype.actionRadius = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Constants.startConstants = function (builder) {
        builder.startObject(8);
    };
    Constants.addSetupPhaseLength = function (builder, setupPhaseLength) {
        builder.addFieldInt32(0, setupPhaseLength, 0);
    };
    Constants.addFlagMinDistance = function (builder, flagMinDistance) {
        builder.addFieldInt32(1, flagMinDistance, 0);
    };
    Constants.addGlobalUpgradeRoundDelay = function (builder, globalUpgradeRoundDelay) {
        builder.addFieldInt32(2, globalUpgradeRoundDelay, 0);
    };
    Constants.addPassiveResourceRate = function (builder, passiveResourceRate) {
        builder.addFieldInt32(3, passiveResourceRate, 0);
    };
    Constants.addRobotBaseHealth = function (builder, robotBaseHealth) {
        builder.addFieldInt32(4, robotBaseHealth, 0);
    };
    Constants.addJailedRounds = function (builder, jailedRounds) {
        builder.addFieldInt32(5, jailedRounds, 0);
    };
    Constants.addVisionRadius = function (builder, visionRadius) {
        builder.addFieldInt32(6, visionRadius, 0);
    };
    Constants.addActionRadius = function (builder, actionRadius) {
        builder.addFieldInt32(7, actionRadius, 0);
    };
    Constants.endConstants = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Constants.createConstants = function (builder, setupPhaseLength, flagMinDistance, globalUpgradeRoundDelay, passiveResourceRate, robotBaseHealth, jailedRounds, visionRadius, actionRadius) {
        Constants.startConstants(builder);
        Constants.addSetupPhaseLength(builder, setupPhaseLength);
        Constants.addFlagMinDistance(builder, flagMinDistance);
        Constants.addGlobalUpgradeRoundDelay(builder, globalUpgradeRoundDelay);
        Constants.addPassiveResourceRate(builder, passiveResourceRate);
        Constants.addRobotBaseHealth(builder, robotBaseHealth);
        Constants.addJailedRounds(builder, jailedRounds);
        Constants.addVisionRadius(builder, visionRadius);
        Constants.addActionRadius(builder, actionRadius);
        return Constants.endConstants(builder);
    };
    return Constants;
}());
exports.Constants = Constants;
