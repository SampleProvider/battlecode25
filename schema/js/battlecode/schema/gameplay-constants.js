"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameplayConstants = void 0;
var flatbuffers = require("flatbuffers");
var GameplayConstants = /** @class */ (function () {
    function GameplayConstants() {
        this.bb = null;
        this.bb_pos = 0;
    }
    GameplayConstants.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    GameplayConstants.getRootAsGameplayConstants = function (bb, obj) {
        return (obj || new GameplayConstants()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    GameplayConstants.getSizePrefixedRootAsGameplayConstants = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GameplayConstants()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    GameplayConstants.prototype.setupPhaseLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    GameplayConstants.prototype.flagMinDistance = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    GameplayConstants.prototype.globalUpgradeRoundDelay = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    GameplayConstants.prototype.passiveResourceRate = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    GameplayConstants.prototype.robotBaseHealth = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    GameplayConstants.prototype.jailedRounds = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    GameplayConstants.prototype.visionRadius = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    GameplayConstants.prototype.actionRadius = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    GameplayConstants.startGameplayConstants = function (builder) {
        builder.startObject(8);
    };
    GameplayConstants.addSetupPhaseLength = function (builder, setupPhaseLength) {
        builder.addFieldInt32(0, setupPhaseLength, 0);
    };
    GameplayConstants.addFlagMinDistance = function (builder, flagMinDistance) {
        builder.addFieldInt32(1, flagMinDistance, 0);
    };
    GameplayConstants.addGlobalUpgradeRoundDelay = function (builder, globalUpgradeRoundDelay) {
        builder.addFieldInt32(2, globalUpgradeRoundDelay, 0);
    };
    GameplayConstants.addPassiveResourceRate = function (builder, passiveResourceRate) {
        builder.addFieldInt32(3, passiveResourceRate, 0);
    };
    GameplayConstants.addRobotBaseHealth = function (builder, robotBaseHealth) {
        builder.addFieldInt32(4, robotBaseHealth, 0);
    };
    GameplayConstants.addJailedRounds = function (builder, jailedRounds) {
        builder.addFieldInt32(5, jailedRounds, 0);
    };
    GameplayConstants.addVisionRadius = function (builder, visionRadius) {
        builder.addFieldInt32(6, visionRadius, 0);
    };
    GameplayConstants.addActionRadius = function (builder, actionRadius) {
        builder.addFieldInt32(7, actionRadius, 0);
    };
    GameplayConstants.endGameplayConstants = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    GameplayConstants.createGameplayConstants = function (builder, setupPhaseLength, flagMinDistance, globalUpgradeRoundDelay, passiveResourceRate, robotBaseHealth, jailedRounds, visionRadius, actionRadius) {
        GameplayConstants.startGameplayConstants(builder);
        GameplayConstants.addSetupPhaseLength(builder, setupPhaseLength);
        GameplayConstants.addFlagMinDistance(builder, flagMinDistance);
        GameplayConstants.addGlobalUpgradeRoundDelay(builder, globalUpgradeRoundDelay);
        GameplayConstants.addPassiveResourceRate(builder, passiveResourceRate);
        GameplayConstants.addRobotBaseHealth(builder, robotBaseHealth);
        GameplayConstants.addJailedRounds(builder, jailedRounds);
        GameplayConstants.addVisionRadius(builder, visionRadius);
        GameplayConstants.addActionRadius(builder, actionRadius);
        return GameplayConstants.endGameplayConstants(builder);
    };
    return GameplayConstants;
}());
exports.GameplayConstants = GameplayConstants;
