// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class GameConstants {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GameConstants {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGameConstants(bb:flatbuffers.ByteBuffer, obj?:GameConstants):GameConstants {
  return (obj || new GameConstants()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGameConstants(bb:flatbuffers.ByteBuffer, obj?:GameConstants):GameConstants {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GameConstants()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

setupPhaseLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

flagMinDistance():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

globalUpgradeRoundDelay():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

passiveResourceRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

robotBaseHealth():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

jailedRounds():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

visionRadius():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

actionRadius():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startGameConstants(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addSetupPhaseLength(builder:flatbuffers.Builder, setupPhaseLength:number) {
  builder.addFieldInt32(0, setupPhaseLength, 0);
}

static addFlagMinDistance(builder:flatbuffers.Builder, flagMinDistance:number) {
  builder.addFieldInt32(1, flagMinDistance, 0);
}

static addGlobalUpgradeRoundDelay(builder:flatbuffers.Builder, globalUpgradeRoundDelay:number) {
  builder.addFieldInt32(2, globalUpgradeRoundDelay, 0);
}

static addPassiveResourceRate(builder:flatbuffers.Builder, passiveResourceRate:number) {
  builder.addFieldInt32(3, passiveResourceRate, 0);
}

static addRobotBaseHealth(builder:flatbuffers.Builder, robotBaseHealth:number) {
  builder.addFieldInt32(4, robotBaseHealth, 0);
}

static addJailedRounds(builder:flatbuffers.Builder, jailedRounds:number) {
  builder.addFieldInt32(5, jailedRounds, 0);
}

static addVisionRadius(builder:flatbuffers.Builder, visionRadius:number) {
  builder.addFieldInt32(6, visionRadius, 0);
}

static addActionRadius(builder:flatbuffers.Builder, actionRadius:number) {
  builder.addFieldInt32(7, actionRadius, 0);
}

static endGameConstants(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGameConstants(builder:flatbuffers.Builder, setupPhaseLength:number, flagMinDistance:number, globalUpgradeRoundDelay:number, passiveResourceRate:number, robotBaseHealth:number, jailedRounds:number, visionRadius:number, actionRadius:number):flatbuffers.Offset {
  GameConstants.startGameConstants(builder);
  GameConstants.addSetupPhaseLength(builder, setupPhaseLength);
  GameConstants.addFlagMinDistance(builder, flagMinDistance);
  GameConstants.addGlobalUpgradeRoundDelay(builder, globalUpgradeRoundDelay);
  GameConstants.addPassiveResourceRate(builder, passiveResourceRate);
  GameConstants.addRobotBaseHealth(builder, robotBaseHealth);
  GameConstants.addJailedRounds(builder, jailedRounds);
  GameConstants.addVisionRadius(builder, visionRadius);
  GameConstants.addActionRadius(builder, actionRadius);
  return GameConstants.endGameConstants(builder);
}
}
