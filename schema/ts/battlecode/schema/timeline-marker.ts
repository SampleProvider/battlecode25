// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

/**
 * Markers for events during the game indicated by the user
 */
export class TimelineMarker {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TimelineMarker {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTimelineMarker(bb:flatbuffers.ByteBuffer, obj?:TimelineMarker):TimelineMarker {
  return (obj || new TimelineMarker()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTimelineMarker(bb:flatbuffers.ByteBuffer, obj?:TimelineMarker):TimelineMarker {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TimelineMarker()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

team():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

round():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

colorHex():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

label():string|null
label(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
label(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startTimelineMarker(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addTeam(builder:flatbuffers.Builder, team:number) {
  builder.addFieldInt8(0, team, 0);
}

static addRound(builder:flatbuffers.Builder, round:number) {
  builder.addFieldInt32(1, round, 0);
}

static addColorHex(builder:flatbuffers.Builder, colorHex:number) {
  builder.addFieldInt32(2, colorHex, 0);
}

static addLabel(builder:flatbuffers.Builder, labelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, labelOffset, 0);
}

static endTimelineMarker(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTimelineMarker(builder:flatbuffers.Builder, team:number, round:number, colorHex:number, labelOffset:flatbuffers.Offset):flatbuffers.Offset {
  TimelineMarker.startTimelineMarker(builder);
  TimelineMarker.addTeam(builder, team);
  TimelineMarker.addRound(builder, round);
  TimelineMarker.addColorHex(builder, colorHex);
  TimelineMarker.addLabel(builder, labelOffset);
  return TimelineMarker.endTimelineMarker(builder);
}
}
