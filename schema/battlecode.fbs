namespace battlecode.schema;

struct Vec {
    x: int = 0;
    y: int = 0;
}

table VecTable {
    xs: [int];
    ys: [int];
}

table RGBTable {
    red: [int];
    green: [int];
    blue: [int];
}

table TeamData {
    name: string;
    packageName: string;
    teamId: byte;
}

table CommTable {
    team1: [int];
    team2: [int];
}

enum SepcializationType: byte {
    ATTACK,
    BUILD,
    HEAL
}

table SpecializationMetadata {
    type: SepcializationType;
    level: int;
    actionCost: int;
    actionJailedPenalty: int;
    cooldownReduction: int;
    damageIncrease: int;
    healIncrease: int;
}

enum BuildActionType: byte {
    EXPLOSIVE_TRAP,
    WATER_TRAP,
    STUN_TRAP,
    DIG,
    FILL
}

table BuildActionMetadata {
    type: BuildActionType;
    cost: int;
    buildCooldown: int;
}

table Constants {
    setupPhaseLength: int;
    flagMinDistance: int;
    globalUpgradeRoundDelay: int;
    passiveResourceRate: int;
    robotBaseHealth: int;
    jailedRounds: int;
    visionRadius: int;
    actionRadius: int;
}

enum GlobalUpgradeType: byte {
    ACTION_UPGRADE,
    HEALING_UPGRADE,
    CAPTURING_UPGRADE
}

table GlobalUpgradeMetadata {
    type: GlobalUpgradeType;
    upgradeAmount: int;
}

// A list of new bodies to be placed on the map.
table SpawnedBodyTable {
    robotIds: [int];
    teamIds: [byte];
    locs: VecTable;
    attacksPerformed: [int];
    attackLevels: [int];
    buildsPerformed: [int];
    buildLevels: [int];
    healsPerformed: [int];
    healLevels: [int];
    holdingFlag: [bool];
}

table GameMap {
    name: string;
    size: Vec;
    symmetry: int; // The map symmetry: 0 for rotation, 1 for horizontal, 2 for vertical.
    bodies: SpawnedBodyTable;
    randomSeed: int;
    walls: [bool];
    water: [bool];
    divider: [bool];
    spawnLocations: VecTable; // first three are for team 0 and second three are for team 1
    resourcePiles: VecTable;
    resourcePileAmounts: [int];
}

enum Action : byte {
    // Target: ID of hit robot
    ATTACK,
    // Target: ID of healed robot
    HEAL,
    // Target: x + y * width of dig location
    DIG,
    // Target: x + y * width of fill location
    FILL,
    // Target: x + y * width of explosive trap location
    EXPLOSIVE_TRAP,
    // Target: x + y * width of water trap location
    WATER_TRAP,
    // Target: x + y * width of stun trap location
    STUN_TRAP,
    // Target: flag id
    PICKUP_FLAG,
    // Target: flag id
    DROP_FLAG,

    // Target: none
    

    // Target: GlobalUpgradeType id
    GLOBAL_UPGRADE,

    /// Dies due to an uncaught exception
    /// Target: none
    DIE_EXCEPTION,
}



//========================================================================================
// Profiler tables

/// These tables are set-up so that they match closely with speedscope's file format documented at
/// https://github.com/jlfwong/speedscope/wiki/Importing-from-custom-sources.
/// The client uses speedscope to show the recorded data in an interactive interface.

/// A single event in a profile. Represents either an open event (meaning a
/// method has been entered) or a close event (meaning the method was exited).
table ProfilerEvent {
    /// Whether this is an open event (true) or a close event (false).
    isOpen: bool;
    /// The bytecode counter at the time the event occurred.
    at: int;
    /// The index of the method name in the ProfilerFile.frames array.
    frame: int;
}

/// A profile contains all events and is labeled with a name.
table ProfilerProfile {
    /// The display-friendly name of the profile.
    name: string;
    /// The events that occurred in the profile.
    events: [ProfilerEvent];
}

/// A profiler file is a collection of profiles.
/// When profiling is enabled there is one of these per team per match.
table ProfilerFile {
    /// The method names that are referred to in the events.
    frames: [string];
    /// The recorded profiles, one per robot.
    profiles: [ProfilerProfile];
}
//========================================================================================


/// Events

/// An Event is a single step that needs to be processed.
/// A saved game simply consists of a long list of Events.
/// Events can be divided by either being sent separately (e.g. as separate
/// websocket messages), or by being wrapped with a GameWrapper.
/// A game consists of a series of matches; a match consists of a series of
/// rounds, and is played on a single map. Each round is a single simulation
/// step.
union Event {
    /// There should only be one GameHeader, at the start of the stream.
    GameHeader,
    /// There should be one MatchHeader at the start of each match.
    MatchHeader,
    /// A single simulation step. A round may be skipped if
    /// nothing happens during its time.
    Round,
    /// There should be one MatchFooter at the end of each simulation step.
    MatchFooter,
    /// There should only be one GameFooter, at the end of the stream.
    GameFooter
}

/// The first event sent in the game. Contains all metadata about the game.
table GameHeader {
    specVersion: string;
    teams: [TeamData];

    specializationMetadata: [SpecializationMetadata];
    buildActionMetadata: [BuildActionMetadata];
    globalUpgradeMetadata: [GlobalUpgradeMetadata];
    constants: Constants;
}

/// The final event sent in the game.
table GameFooter {
    /// The ID of the winning team of the game.
    winner: byte;
}

/// Sent to start a match.
table MatchHeader {
    map: GameMap;
    maxRounds: int;
}

/// Sent to end a match.
table MatchFooter {
    /// The ID of the winning team.
    winner: byte;
    /// The number of rounds played.
    totalRounds: int;
    /// Profiler data for team A and B if profiling is enabled.
    profilerFiles: [ProfilerFile];
}

/// A single time-step in a Game.
/// The bulk of the data in the file is stored in tables like this.
/// Note that a struct-of-arrays format is more space efficient than an array-
/// of-structs.
table Round {
    /// The IDs of teams in the Game.
    teamIds: [int];
    /// The total amount of resource this round per team
    teamResourceAmounts: [int];
    teamCommunication: CommTable;

    robotIds: [int];
    robotLocs: VecTable;
    robotMoveCooldowns: [int];
    robotActionCooldowns: [int];
    robotHealths: [int];
    attacksPerformed: [int];
    attackLevels: [int];
    buildsPerformed: [int];
    buildLevels: [int];
    healsPerformed: [int];
    healLevels: [int];

    /// New bodies.
    spawnedBodies: SpawnedBodyTable;

    /// The IDs of bodies that died.
    diedIds: [int];

    /// The IDs of robots that performed actions.
    /// IDs may repeat.
    actionIds: [int];
    /// The actions performed. These actions allow us to track many things about the current state.
    actions: [Action];
    /// The 'targets' of the performed actions. Actions without targets may have any value
    actionTargets: [int];

    claimedResourcePiles: VecTable;

    trapIds: [int];
    trapAddedLocations: VecTable;
    trapAddedTypes: [BuildActionType];
    trapAddedTeams: [byte];

    trapTriggeredIds: [int];

    digLocations: VecTable;
    fillLocations: VecTable;

    /// The IDs of the robots who changed their indicator strings
    indicatorStringIds: [int];
    /// The messages of the robots who changed their indicator strings
    indicatorStrings: [string];

    /// The IDs of bodies that set indicator dots
    indicatorDotIds: [int];
    /// The location of the indicator dots
    indicatorDotLocs: VecTable;
    /// The RGB values of the indicator dots
    indicatorDotRGBs: RGBTable;

    /// The IDs of bodies that set indicator lines
    indicatorLineIds: [int];
    /// The start location of the indicator lines
    indicatorLineStartLocs: VecTable;
    /// The end location of the indicator lines
    indicatorLineEndLocs: VecTable;
    /// The RGB values of the indicator lines
    indicatorLineRGBs: RGBTable;

    // logs have been replaced with indicator strings

    /// The first sent Round in a match should have index 1. (The starting state,
    /// created by the MatchHeader, can be thought to have index 0.)
    /// It should increase by one for each following round.
    roundId: int;

    /// The IDs of player bodies.
    bytecodeIds: [int];
    /// The bytecodes used by the player bodies.
    bytecodesUsed: [int];
}

/// Necessary due to flatbuffers requiring unions to be wrapped in tables.
table EventWrapper {
    e: Event;
}

/// If events are not otherwise delimited, this wrapper structure
/// allows a game to be stored in a single buffer.
/// The first event will be a GameHeader; the last event will be a GameFooter.
/// matchHeaders[0] is the index of the 0th match header in the event stream,
/// corresponding to matchFooters[0]. These indices allow quick traversal of
/// the file.
table GameWrapper {
    /// The series of events comprising the game.
    events: [EventWrapper];
    /// The indices of the headers of the matches, in order.
    matchHeaders: [int];
    /// The indices of the footers of the matches, in order.
    matchFooters: [int];
}
